{"totalbranchlevel":2,"branchnum":6,"term_id":42,"name":"二叉树","children":[{"totalbranchlevel":0,"facet_name":"摘要","totalbranchnum":0,"type":"branch","totalleafnum":8,"children":[{"url":"","content":"<tbody>\n <tr> \n  <td class=\"mbox-image\"> \n   <div style=\"width: 52px;\">\n    <img width=\"40\" height=\"40\" alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png\" data-file-height=\"48\" data-file-width=\"48\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Edit-clear.svg/60px-Edit-clear.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Edit-clear.svg/80px-Edit-clear.svg.png 2x\" />\n   </div> </td> \n  <td class=\"mbox-text\"><span class=\"mbox-text-span\">本条目<b>可能包含过度、低质、或不恰当的范例或举例。</b>请协助<a class=\"external text\" href=\"//zh.wikipedia.org/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit\">改善</a>条目，增加叙述文字、除去不切题与过多的范例、精简范例分量。<small><i>（2015年4月8日）</i></small> <span class=\"hide-when-compact\"><br /></span> </span></td> \n </tr> \n</tbody>","fragment_id":"摘要_1","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td class=\"mbox-image\"> \n   <div style=\"width: 52px;\">\n    <img width=\"40\" height=\"40\" alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png\" data-file-height=\"48\" data-file-width=\"48\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Edit-clear.svg/60px-Edit-clear.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Edit-clear.svg/80px-Edit-clear.svg.png 2x\" />\n   </div> </td> \n  <td class=\"mbox-text\"><span class=\"mbox-text-span\">本条目<b>存在<a title=\"Wikipedia:隐藏元素\" href=\"/wiki/Wikipedia:%E9%9A%B1%E8%97%8F%E5%85%83%E7%B4%A0\">隐藏的内容</a></b>，在一些情况下可能损害读者的阅览体验。请协助<a class=\"external text\" href=\"//zh.wikipedia.org/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit\">改善</a>条目，以符合维基百科的标准。<small><i>（2015年3月2日）</i></small> <span class=\"hide-when-compact\"><br /> <small>一般应该仅由特定标准化模板提供折叠资料表格，勿因<a title=\"Wikipedia:SPOIL\" class=\"mw-redirect\" href=\"/wiki/Wikipedia:SPOIL\">故事剧情</a>或项目混杂而隐藏；内容应该考虑其他方式呈现。重复记载、过度细节与<a title=\"Wikipedia:NOT\" class=\"mw-redirect\" href=\"/wiki/Wikipedia:NOT\">无助了解主题的堆砌内容</a>等需要考虑除去。</small></span> </span></td> \n </tr> \n</tbody>","fragment_id":"摘要_2","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td class=\"mbox-image\"> \n   <div style=\"width: 52px;\">\n    <a class=\"image\" href=\"/wiki/File:Tango-nosources.svg\"><img width=\"45\" height=\"45\" alt=\"Tango-nosources.svg\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Tango-nosources.svg/45px-Tango-nosources.svg.png\" data-file-height=\"48\" data-file-width=\"48\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Tango-nosources.svg/68px-Tango-nosources.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Tango-nosources.svg/90px-Tango-nosources.svg.png 2x\" /></a>\n   </div> </td> \n  <td class=\"mbox-text\"><span class=\"mbox-text-span\">本条目<b>没有列出任何<a title=\"Wikipedia:列明来源\" href=\"/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90\">参考或来源</a></b>。<small><i>（2007年10月27日）</i></small> <span class=\"hide-when-compact\"><br /> <small>维基百科所有的内容都应该<a title=\"Wikipedia:可供查证\" href=\"/wiki/Wikipedia:%E5%8F%AF%E4%BE%9B%E6%9F%A5%E8%AD%89\">可供查证</a>。请协助添加来自<a title=\"Wikipedia:可靠来源\" href=\"/wiki/Wikipedia:%E5%8F%AF%E9%9D%A0%E6%9D%A5%E6%BA%90\">可靠来源</a>的引用以<a class=\"external text\" href=\"//zh.wikipedia.org/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit\">改善这篇条目</a>。<a title=\"Wikipedia:可供查证\" class=\"mw-redirect\" href=\"/wiki/Wikipedia:%E5%8F%AF%E4%BE%9B%E6%9F%A5%E8%AF%81\">无法查证</a>的内容可能被提出异议而移除。</small></span> </span></td> \n </tr> \n</tbody>","fragment_id":"摘要_3","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"thumbinner\" style=\"width: 194px;\">\n <a class=\"image\" href=\"/wiki/File:Binary_tree.svg\"><img width=\"192\" height=\"160\" class=\"thumbimage\" alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/192px-Binary_tree.svg.png\" data-file-height=\"250\" data-file-width=\"300\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/288px-Binary_tree.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/384px-Binary_tree.svg.png 2x\" /></a> \n <div class=\"thumbcaption\"> \n  <div class=\"magnify\">\n   <a title=\"放大\" class=\"internal\" href=\"/wiki/File:Binary_tree.svg\"></a>\n  </div> 一棵有9个节点和深度为3的二叉树，根节点的值为2，它既不平衡也没有经过排序。\n </div> \n</div>","fragment_id":"摘要_4","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"thumbinner\" style=\"width: 222px;\">\n <a class=\"image\" href=\"/wiki/File:Binary_tree.png\"><img width=\"220\" height=\"128\" class=\"thumbimage\" alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/220px-Binary_tree.png\" data-file-height=\"758\" data-file-width=\"1305\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/330px-Binary_tree.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/440px-Binary_tree.png 2x\" /></a> \n <div class=\"thumbcaption\"> \n  <div class=\"magnify\">\n   <a title=\"放大\" class=\"internal\" href=\"/wiki/File:Binary_tree.png\"></a>\n  </div> 一棵简单的满二叉树\n </div> \n</div>","fragment_id":"摘要_5","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"在<a title=\"计算机科学\" class=\"mw-redirect\" href=\"/wiki/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\">计算机科学</a>中，<b>二叉树</b>（<span class=\"LangWithName\">英语：<span lang=\"en\" xml:lang=\"en\">Binary tree</span></span>）是每个节点最多只有两个分支(不存在分支度大于2的节点)的<a title=\"树结构\" class=\"mw-redirect\" href=\"/wiki/%E6%A0%91%E7%BB%93%E6%9E%84\">树结构</a>。通常分支被称作“左子树”和“右子树”。二叉树的分支具有左右次序，不能颠倒。","fragment_id":"摘要_6","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"二叉树的第i层至多拥有<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         i\n        </mi> \n        <mo>\n         −\n         <!-- − -->\n        </mo> \n        <mn>\n         1\n        </mn> \n       </mrow> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{i-1}}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 4.09ex; height: 2.67ex; vertical-align: -0.33ex;\" alt=\"2^{i-1}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/de838b503259acc792dd682654445984ea6e4c6d\" /></span>个节点数；深度为<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       k\n      </mi> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle k}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.22ex; height: 2.17ex; vertical-align: -0.33ex;\" alt=\"k\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/c3c9a2c7b599b37105512c5d570edc034056dd40\" /></span>的二叉树至多总共有<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mtable displaystyle=\"true\" columnspacing=\"0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em\" rowspacing=\"3pt\" columnalign=\"right left right left right left right left right left right left\"> \n         <mtr> \n          <mtd> \n           <mi>\n            k\n           </mi> \n           <mo>\n            +\n           </mo> \n           <mn>\n            1\n           </mn> \n          </mtd> \n         </mtr> \n        </mtable> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{\\begin{aligned}k+1\\end{aligned}}-1}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 9.16ex; height: 2.84ex; vertical-align: -0.33ex;\" alt=\"{\\displaystyle 2^{\\begin{aligned}k+1\\end{aligned}}-1}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/f24729d4eae59094b7ed114e09dcbf142f32cde8\" /></span>个节点数（定义根节点所在深度 <span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msub> \n       <mi>\n        k\n       </mi> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mn>\n         0\n        </mn> \n       </mrow> \n      </msub> \n      <mo>\n       =\n      </mo> \n      <mn>\n       0\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle k_{0}=0}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 6.56ex; height: 2.5ex; vertical-align: -0.67ex;\" alt=\"{\\displaystyle k_{0}=0}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/93e97ea5847aa5aa81c2ecaca22b04c612a72c05\" /></span>），而总计拥有节点数匹配的，称为“满二叉树”；深度为k有n个节点的二叉树，当且仅当其中的每一节点，都可以和同样深度k的满二叉树，序号为1到n的节点一对一对应时，称为“<a title=\"完全二叉树\" class=\"mw-redirect\" href=\"/wiki/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91\">完全二叉树</a>”。；对任何一棵非空的二叉树T，如果其叶片(终端节点)数为<i>n</i><sub>0</sub>，分支度为2的节点数为<i>n</i><sub>2</sub>，则<i>n</i><sub>0</sub> = <i>n</i><sub>2</sub> + 1。","fragment_id":"摘要_7","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现<a title=\"二叉查找树\" href=\"/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9\">二叉查找树</a>和<a title=\"二元堆积\" class=\"mw-redirect\" href=\"/wiki/%E4%BA%8C%E5%85%83%E5%A0%86%E7%A9%8D\">二元堆积</a>，并应用于高效率的搜索和排序。","fragment_id":"摘要_8","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"定义","totalbranchnum":0,"type":"branch","totalleafnum":0,"children":[]},{"totalbranchlevel":0,"facet_name":"类型","totalbranchnum":0,"type":"branch","totalleafnum":0,"children":[]},{"totalbranchlevel":1,"facet_name":"存储方法","totalbranchnum":3,"type":"branch","totalleafnum":3,"children":[{"totalbranchlevel":0,"facet_name":"顺序存储表示","totalbranchnum":0,"type":"branch","totalleafnum":0,"children":[]},{"totalbranchlevel":0,"facet_name":"二叉链表存储表示","totalbranchnum":0,"type":"branch","totalleafnum":0,"children":[]},{"totalbranchlevel":0,"facet_name":"三叉链表存储表示","totalbranchnum":0,"type":"branch","totalleafnum":0,"children":[]}]},{"totalbranchlevel":1,"facet_name":"访问方法","totalbranchnum":3,"type":"branch","totalleafnum":3,"children":[{"totalbranchlevel":0,"facet_name":"前(先)序、中序、后序遍历","totalbranchnum":0,"type":"branch","totalleafnum":6,"children":[{"url":"","content":"<pre> <span class=\"cm\">/* 二元樹的順序存儲表示 */</span>\n <span class=\"cp\">#define MAX_TREE_SIZE 100 </span><span class=\"cm\">/* 二元樹的最大節點數 */</span>\n <span class=\"k\">typedef</span> <span class=\"n\">TElemType</span> <span class=\"n\">SqBiTree</span><span class=\"p\">[</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"p\">];</span> <span class=\"cm\">/* 0号单元存储根节点 */</span>\n\n <span class=\"k\">typedef</span> <span class=\"k\">struct</span>\n <span class=\"p\">{</span>\n   <span class=\"kt\">int</span> <span class=\"n\">level</span><span class=\"p\">,</span><span class=\"n\">order</span><span class=\"p\">;</span> <span class=\"cm\">/* 節點的層，本層序號(按[[滿二元樹]]計算) */</span>\n <span class=\"p\">}</span><span class=\"n\">position</span><span class=\"p\">;</span>\n</pre>","fragment_id":"前(先)序、中序、后序遍历_1","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"基本操作\"></span><span class=\"mw-headline\" id=\".E5.9F.BA.E6.9C.AC.E6.93.8D.E4.BD.9C\">基本操作</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：基本操作\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=6\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"前(先)序、中序、后序遍历_2","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"NavHead\">\n 基于C/C++的实现算法\n <span class=\"NavToggle\" id=\"NavToggle0\">显示▼</span>\n</div> \n<div class=\"NavContent\" style=\"display: none;\"> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"cm\">/* [[二元樹]]的順序存儲的基本操作(23個)*/</span>\n <span class=\"cp\">#define ClearBiTree InitBiTree </span><span class=\"cm\">/* 在順序存儲結構中，兩函數完全一樣 */</span><span class=\"cp\">\\arccos{}</span>\n <span class=\"cp\">#define DestroyBiTree InitBiTree </span><span class=\"cm\">/* 在順序存儲結構中，兩函數完全一樣 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">InitBiTree</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"err\">－－－（</span><span class=\"n\">SqBiTree</span> <span class=\"o\">&amp;</span> <span class=\"n\">T</span><span class=\"err\">）</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 構造[[空二元樹]]T。因為T是陣列名稱，故不需要&amp; */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 初值為空(Nil在主程中定義) */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">CreateBiTree</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 按層序次序輸入二叉樹中結點的值(字元型或整型), 構造順序存儲的二叉樹T */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n <span class=\"cp\">#if CHAR </span><span class=\"cm\">/* 結點類型為字元 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">;</span>\n   <span class=\"kt\">char</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"p\">];</span>\n   <span class=\"n\">InitBiTree</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造[空二元樹]T */</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;請按層序輸入結點的值(字元)，空格表示空結點，節點數≦%d:</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"p\">);</span>\n   <span class=\"n\">gets</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"cm\">/* 輸入字串 */</span>\n   <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"cm\">/* 求字串的長度 */</span>\n   <span class=\"k\">for</span><span class=\"p\">(;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">l</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"cm\">/* 將字串賦值給T */</span>\n     <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n <span class=\"cp\">#else  </span><span class=\"cm\">/* 節點類型為整型 */</span>\n   <span class=\"n\">InitBiTree</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造[空二元樹]T */</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;請按層序輸入節點的值(整型)，0表示空節點，輸999結束。節點數≦%d:</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"p\">);</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&quot;%d&quot;</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"mi\">999</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">Nil</span><span class=\"p\">;</span>\n       <span class=\"k\">break</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n <span class=\"cp\">#endif</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 此非根節點(不空)無雙親 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;出現無雙親的非根節點&quot;</span><span class=\"n\">form</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n       <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">ERROR</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">int</span> <span class=\"nf\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：[二元樹]T存在。操作結果：返回T的深度 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到最後一個節點 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span>\n       <span class=\"k\">break</span><span class=\"p\">;</span>\n   <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"cm\">/* 為了便於計算 */</span>\n   <span class=\"k\">do</span>\n     <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">));</span>   <span class=\"cm\">/*pow是原型為double pow( double x, double y ),計算x的y次方,h = log&lt;sub&gt;2&lt;/sub&gt;k + 1來計算[二元樹]的深度*/</span>\n   <span class=\"k\">return</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">Root</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"o\">*</span><span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：[二元樹]T存在。操作結果：當T不空，用e返回T的根，返回OK；否則返回ERROR，e無定義 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span> <span class=\"cm\">/* T空 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n   <span class=\"p\">{</span>\n     <span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Value</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">position</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：[二元樹]T存在，e是T中某個結點(的位置) */</span>\n   <span class=\"cm\">/* 操作結果：返回處於位置e(層,本層序號)的結點的值 */</span>\n   <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">level</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">Assign</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">position</span> <span class=\"n\">e</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點(的位置) */</span>\n   <span class=\"cm\">/* 操作結果：給處於位置e(層,本層序號)的結點賦新值value */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">level</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"cm\">/* 將層、本層序號轉為矩陣的序號 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">T</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 給葉子賦非空值但雙親為空 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"o\">&amp;&amp;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"o\">||</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">))</span> <span class=\"cm\">/*  給雙親賦空值但有葉子(不空) */</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n   <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">;</span>\n   <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Parent</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若e是T的非根結點，則返回它的雙親，否則返回＂空＂ */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空樹 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e */</span>\n       <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 沒找到e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftChild</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的左孩子。若e無左孩子,則返回&quot;空&quot; */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空樹 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e */</span>\n       <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 沒找到e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightChild</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的右孩子。若e無右孩子,則返回&quot;空&quot; */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空樹 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e */</span>\n       <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 沒找到e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftSibling</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的左兄弟。若e是T的左孩子或無左兄弟，則返回＂空＂ */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空樹 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e且其序號為偶數(是右孩子) */</span>\n       <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 沒找到e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightSibling</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的右兄弟。若e是T的右孩子或無右兄弟，則返回＂空＂ */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空樹 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e且其序號為奇數(是左孩子) */</span>\n       <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 沒找到e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">Move</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">q</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"cm\">/* InsertChild()用到。加 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 把從q的j結點開始的子樹移為從T的i結點開始的子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* q的左子樹不空 */</span>\n     <span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"n\">T</span><span class=\"p\">,(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">));</span> <span class=\"cm\">/* 把q的j結點的左子樹移為T的i結點的左子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* q的右子樹不空 */</span>\n     <span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"n\">T</span><span class=\"p\">,(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">));</span> <span class=\"cm\">/* 把q的j結點的右子樹移為T的i結點的右子樹 */</span>\n   <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span> <span class=\"cm\">/* 把q的j結點移為T的i結點 */</span>\n   <span class=\"n\">q</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 把q的j結點置空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">InsertChild</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">,</span><span class=\"n\">SqBiTree</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p是T中某個結點的值，LR為0或1，非空二叉樹c與T不相交且右子樹為空 */</span>\n   <span class=\"cm\">/* 操作結果: 根據LR為0或1,插入c為T中p結點的左或右子樹。p結點的原有左或右子樹則成為c的右子樹 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"cm\">/* 查找p的序號 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* j為p的序號 */</span>\n       <span class=\"k\">break</span><span class=\"p\">;</span>\n   <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">LR</span><span class=\"p\">;</span> <span class=\"cm\">/* k為p的左或右孩子的序號 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* p原來的左或右孩子不空 */</span>\n     <span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"cm\">/* 把從T的k結點開始的子樹移為從k結點的右子樹開始的子樹 */</span>\n   <span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">);</span> <span class=\"cm\">/* 把從c的i結點開始的子樹移為從T的k結點開始的子樹 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">QElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 設佇列元素類型為整型(序號) */</span>\n <span class=\"cp\">#include</span> <span class=\"cpf\">&quot;c3-2.h&quot; /* 鏈佇列 */</span>\n <span class=\"cp\">#include</span> <span class=\"cpf\">&quot;bo3-2.c&quot; /* 鏈佇列的基本操作 */</span>\n <span class=\"n\">Status</span> <span class=\"nf\">DeleteChild</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">position</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為1或0 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為1或0，刪除T中p所指結點的左或右子樹 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n   <span class=\"n\">Status</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">OK</span><span class=\"p\">;</span> <span class=\"cm\">/* 佇列不空的標誌 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列，用於存放待刪除的結點 */</span>\n   <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">level</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"cm\">/* 將層、本層序號轉為矩陣的序號 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 此結點空 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n   <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">LR</span><span class=\"p\">;</span> <span class=\"cm\">/* 待刪除子樹的根結點在矩陣中的序號 */</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 左結點不空 */</span>\n       <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊左結點的序號 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 右結點不空 */</span>\n       <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊右結點的序號 */</span>\n     <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 刪除此結點 */</span>\n     <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"cm\">/* 佇列不空 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">VisitFunc</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">);</span> <span class=\"cm\">/* 函數變數 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">PreTraverse</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* PreOrderTraverse()調用 */</span>\n   <span class=\"n\">VisitFunc</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 左子樹不空 */</span>\n     <span class=\"n\">PreTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 右子樹不空 */</span>\n     <span class=\"n\">PreTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PreOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹存在，Visit是對結點操作的應用函數 */</span>\n   <span class=\"cm\">/* 操作結果：先序遍歷T，對每個結點調用函數Visit一次且僅一次 */</span>\n   <span class=\"n\">VisitFunc</span><span class=\"o\">=</span><span class=\"n\">Visit</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span> <span class=\"cm\">/* 樹不空 */</span>\n     <span class=\"n\">PreTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">InTraverse</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* InOrderTraverse()調用 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 左子樹不空 */</span>\n     <span class=\"n\">InTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n   <span class=\"n\">VisitFunc</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 右子樹不空 */</span>\n     <span class=\"n\">InTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">InOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹存在，Visit是對結點操作的應用函數 */</span>\n   <span class=\"cm\">/* 操作結果：中序遍歷T，對每個結點調用函數Visit一次且僅一次 */</span>\n   <span class=\"n\">VisitFunc</span><span class=\"o\">=</span><span class=\"n\">Visit</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span> <span class=\"cm\">/* 樹不空 */</span>\n     <span class=\"n\">InTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostTraverse</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* PostOrderTraverse()調用 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 左子樹不空 */</span>\n     <span class=\"n\">PostTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 右子樹不空 */</span>\n     <span class=\"n\">PostTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n   <span class=\"n\">VisitFunc</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，Visit是對結點操作的應用函數 */</span>\n   <span class=\"cm\">/* 操作結果：後序遍歷T，對每個結點調用函數Visit一次且僅一次 */</span>\n   <span class=\"n\">VisitFunc</span><span class=\"o\">=</span><span class=\"n\">Visit</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span> <span class=\"cm\">/* 樹不空 */</span>\n     <span class=\"n\">PostTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">LevelOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 層序遍歷二叉樹 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">MAX_TREE_SIZE</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span>\n     <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">;</span> <span class=\"cm\">/* 找到最後一個非空結點的序號 */</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;=</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"cm\">/* 從根結點起，按層序遍歷二叉樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]);</span> <span class=\"cm\">/* 只遍歷非空的結點 */</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">Print</span><span class=\"p\">(</span><span class=\"n\">SqBiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 逐層、按本層序號輸出二叉樹 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">;</span>\n   <span class=\"n\">position</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">&lt;=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;第%d層: &quot;</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">k</span><span class=\"o\">&lt;=</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">j</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">;</span>\n       <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span>\n\t <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;%d:&quot;</span><span class=\"n\">form</span><span class=\"s\">&quot; &quot;</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n</div>","fragment_id":"前(先)序、中序、后序遍历_3","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"二叉鏈表存儲表示\"></span><span class=\"mw-headline\" id=\".E4.BA.8C.E5.8F.89.E9.8F.88.E8.A1.A8.E5.AD.98.E5.84.B2.E8.A1.A8.E7.A4.BA\">二叉链表存储表示</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：二叉链表存储表示\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=7\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"前(先)序、中序、后序遍历_4","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"thumbinner\" style=\"width: 404px;\">\n <a class=\"image\" href=\"/wiki/File:Eclb.jpg\"><img width=\"402\" height=\"218\" class=\"thumbimage\" alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/8/82/Eclb.jpg\" data-file-height=\"218\" data-file-width=\"402\" /></a> \n <div class=\"thumbcaption\"> \n  <div class=\"magnify\">\n   <a title=\"放大\" class=\"internal\" href=\"/wiki/File:Eclb.jpg\"></a>\n  </div> 基于链表的二叉树逻辑结构示意\n </div> \n</div>","fragment_id":"前(先)序、中序、后序遍历_5","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"在使用<a title=\"记录\" href=\"/wiki/%E8%AE%B0%E5%BD%95\">记录</a>或<a title=\"指针 (信息学)（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E6%8C%87%E6%A8%99_(%E8%B3%87%E8%A8%8A%E5%AD%B8)&amp;action=edit&amp;redlink=1\">内存地址指针</a>的程序设计语言中，二叉树通常用树结点结构来存储。有时也包含指向唯一的父节点的指针。如果一个结点的子结点个数小于2，一些子结点指针可能为空值，或者为特殊的<a title=\"哨兵\" class=\"mw-disambig\" href=\"/wiki/%E5%93%A8%E5%85%B5\">哨兵</a>结点。 使用链表能避免顺序存储浪费空间的问题，算法和结构相对简单，但使用二叉链表，由于缺乏父链的指引，在找回父节点时需要重新扫描树得知父节点的节点地址。","fragment_id":"前(先)序、中序、后序遍历_6","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"深度优先遍历","totalbranchnum":0,"type":"branch","totalleafnum":5,"children":[{"url":"","content":"<pre><span class=\"cm\">/* 二叉樹的二叉鏈表存儲表示 */</span>\n <span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">BiTNode</span>\n <span class=\"p\">{</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">struct</span> <span class=\"n\">BiTNode</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"cm\">/* 左右孩子指針 */</span>\n <span class=\"p\">}</span><span class=\"n\">BiTNode</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">BiTree</span><span class=\"p\">;</span>\n</pre>","fragment_id":"深度优先遍历_1","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"基本操作_2\"></span><span class=\"mw-headline\" id=\".E5.9F.BA.E6.9C.AC.E6.93.8D.E4.BD.9C_2\">基本操作</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：基本操作\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=9\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"深度优先遍历_2","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"NavHead\">\n 基于C/C++的实现算法\n <span class=\"NavToggle\" id=\"NavToggle1\">显示▼</span>\n</div> \n<div class=\"NavContent\" style=\"display: none;\"> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"cm\">/* 二叉樹的二叉鏈表存儲的基本操作(22個) */</span>\n <span class=\"cp\">#define ClearBiTree DestroyBiTree </span><span class=\"cm\">/* 清空二叉樹和銷毀二叉樹的操作一樣 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;func6-3.c&quot;</span>\n <span class=\"cm\">/* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函數 */</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">CreateBiTree</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 演算法6.4：按先序次序輸入二叉樹中結點的值(可為字元型或整型，在主程中定義)，*/</span>\n   <span class=\"cm\">/* 構造二叉鏈表表示的二叉樹T。變數Nil表示空(子)樹。有改動 */</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n   <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">ch</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n   <span class=\"p\">{</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">BiTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BiTNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 生成根結點 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n       <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">OVERFLOW</span><span class=\"p\">);</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">ch</span><span class=\"p\">;</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造左子樹 */</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造右子樹 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：若T為空二叉樹，則返回TRUE，否則FALSE */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">FALSE</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">TRUE</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">int</span> <span class=\"nf\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的深度 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">==</span><span class=\"nb\">NULL</span><span class=\"p\">)</span>  <span class=\"cm\">/*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/</span><span class=\"p\">;</span> \n     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"cm\">/* 空樹深度為0 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* i為左子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* j為右子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"o\">?</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"cm\">/* T的深度為其左右子樹的深度中的大者+1 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Root</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的根 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Value</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點。操作結果：返回p所指結點的值 */</span>\n   <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">Assign</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 給p所指結點賦值為value */</span>\n   <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">BiTree</span> <span class=\"n\">QElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 設佇列元素為二叉樹的指針類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-2.h&quot; /* 鏈佇列 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-2.c&quot; /* 鏈佇列的基本操作 */</span>\n <span class=\"n\">TElemType</span> <span class=\"nf\">Parent</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若e是T的非根結點，則返回它的雙親，否則返回＂空＂*/</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 樹根指針入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊，佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"o\">||</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span>\n       <span class=\"cm\">/* 找到e(是其左或右孩子) */</span>\n         <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的雙親的值 */</span>\n       <span class=\"k\">else</span> <span class=\"cm\">/* 沒找到e，則入隊其左右孩子指針(如果非空) */</span>\n       <span class=\"p\">{</span>\n         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空或沒找到e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">BiTree</span> <span class=\"nf\">Point</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回二叉樹T中指向元素值為s的結點的指標。另加 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根指針入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊，佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">s</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊左孩子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊右孩子 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的左孩子。若e無左孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在左孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的左孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的右孩子。若e無右孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在右孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的右孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftSibling</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的左兄弟。若e是T的左孩子或無左兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Parent</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a為e的雙親 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e的雙親 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* p為指向結點a的指標 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"cm\">/* p存在左右孩子且右孩子是e */</span>\n         <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回p的左孩子(e的左兄弟) */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightSibling</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的右兄弟。若e是T的右孩子或無右兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Parent</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a為e的雙親 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e的雙親 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* p為指向結點a的指標 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"cm\">/* p存在左右孩子且左孩子是e */</span>\n         <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回p的右孩子(e的右兄弟) */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">InsertChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">,</span><span class=\"n\">BiTree</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1，非空二叉樹c與T不相交且右子樹為空 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，插入c為T中p所指結點的左或右子樹。p所指結點的 */</span>\n   <span class=\"cm\">/*           原有左或右子樹則成為c的右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* LR==1 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">DeleteChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，刪除T中p所指結點的左或右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"cm\">/* 刪除左子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 刪除右子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">BiTree</span> <span class=\"n\">SElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 設棧元素為二叉樹的指針類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-1.h&quot; /* 順序棧 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-1.c&quot; /* 順序棧的基本操作 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">InOrderTraverse1</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 採用二叉鏈表存儲結構，Visit是對資料元素操作的應用函數。演算法6.3，有改動 */</span>\n   <span class=\"cm\">/* 中序遍歷二叉樹T的非遞迴演算法(利用棧)，對每個資料元素調用函數Visit */</span>\n   <span class=\"n\">SqStack</span> <span class=\"n\">S</span><span class=\"p\">;</span>\n   <span class=\"n\">InitStack</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">);</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">||!</span><span class=\"n\">StackEmpty</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span> <span class=\"cm\">/* 根指針進棧，遍歷左子樹 */</span>\n       <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span>\n       <span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span>\n     <span class=\"p\">{</span> <span class=\"cm\">/* 根指針退棧，訪問根結點，遍歷右子樹 */</span>\n       <span class=\"n\">Pop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span>\n       <span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">InOrderTraverse2</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 採用二叉鏈表存儲結構，Visit是對資料元素操作的應用函數。演算法6.2，有改動 */</span>\n   <span class=\"cm\">/* 中序遍歷二叉樹T的非遞迴演算法(利用棧)，對每個資料元素調用函數Visit */</span>\n   <span class=\"n\">SqStack</span> <span class=\"n\">S</span><span class=\"p\">;</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"n\">InitStack</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">);</span>\n   <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根指針進棧 */</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">StackEmpty</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">GetTop</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"p\">)</span>\n       <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 向左走到盡頭 */</span>\n     <span class=\"n\">Pop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 空指針退棧 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">StackEmpty</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span>\n     <span class=\"p\">{</span> <span class=\"cm\">/* 訪問結點，向右一步 */</span>\n       <span class=\"n\">Pop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span>\n       <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，Visit是對結點操作的應用函數 */</span>\n   <span class=\"cm\">/* 操作結果：後序遞迴遍歷T，對每個結點調用函數Visit一次且僅一次 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 先後序遍歷左子樹 */</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 再後序遍歷右子樹 */</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後訪問根結點 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">LevelOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，Visit是對結點操作的應用函數 */</span>\n   <span class=\"cm\">/* 操作結果：層序遞迴遍歷T(利用佇列)，對每個結點調用函數Visit一次且僅一次 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列q */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根指針入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 佇列不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊元素(指標),賦給a */</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span> <span class=\"cm\">/* 訪問a所指結點 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"cm\">/* a有左孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊a的左孩子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"cm\">/* a有右孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊a的右孩子 */</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n</div>","fragment_id":"深度优先遍历_3","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"三叉鏈表存儲表示\"></span><span class=\"mw-headline\" id=\".E4.B8.89.E5.8F.89.E9.8F.88.E8.A1.A8.E5.AD.98.E5.84.B2.E8.A1.A8.E7.A4.BA\">三叉链表存储表示</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：三叉链表存储表示\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=10\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"深度优先遍历_4","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<a title=\"基于三叉链表的二叉树的逻辑结构\" class=\"image\" href=\"/wiki/File:3clb.jpg\"><img width=\"537\" height=\"258\" alt=\"基于三叉链表的二叉树的逻辑结构\" src=\"//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg\" data-file-height=\"258\" data-file-width=\"537\" /></a>","fragment_id":"深度优先遍历_5","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"广度优先遍历","totalbranchnum":0,"type":"branch","totalleafnum":31,"children":[{"url":"","content":"<pre> <span class=\"cm\">/* 二叉樹的三叉鏈表存儲表示 */</span>\n <span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">BiTPNode</span>\n <span class=\"p\">{</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">struct</span> <span class=\"n\">BiTPNode</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"cm\">/* 父、左右孩子指針 */</span>\n <span class=\"p\">}</span><span class=\"n\">BiTPNode</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">BiPTree</span><span class=\"p\">;</span>\n</pre>","fragment_id":"广度优先遍历_1","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"基本操作_3\"></span><span class=\"mw-headline\" id=\".E5.9F.BA.E6.9C.AC.E6.93.8D.E4.BD.9C_3\">基本操作</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：基本操作\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=12\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_2","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"NavHead\">\n 基于C/C++的实现算法\n <span class=\"NavToggle\" id=\"NavToggle2\">显示▼</span>\n</div> \n<div class=\"NavContent\" style=\"display: none;\"> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"cm\">/* 二叉樹的三叉鏈表存儲的基本操作(21個) */</span>\n <span class=\"cp\">#define ClearBiTree DestroyBiTree </span><span class=\"cm\">/* 清空二叉樹和銷毀二叉樹的操作一樣 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">InitBiTree</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 操作結果：構造空二叉樹T */</span>\n   <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">DestroyBiTree</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：銷毀二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n       <span class=\"n\">DestroyBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀左孩子子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n       <span class=\"n\">DestroyBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀右孩子子樹 */</span>\n     <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 釋放根結點 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 空指針賦0 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">CreateBiTree</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 按先序次序輸入二叉樹中結點的值(可為字元型或整型，在主程中定義)，*/</span>\n   <span class=\"cm\">/* 構造三叉鏈表表示的二叉樹T */</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n   <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">ch</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n   <span class=\"p\">{</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BiTPNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 動態生成根結點 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n       <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">OVERFLOW</span><span class=\"p\">);</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">ch</span><span class=\"p\">;</span> <span class=\"cm\">/* 給根結點賦值 */</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 根結點無雙親 */</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造左子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n       <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=*</span><span class=\"n\">T</span><span class=\"p\">;</span> <span class=\"cm\">/* 給左孩子的雙親域賦值 */</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造右子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n       <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=*</span><span class=\"n\">T</span><span class=\"p\">;</span> <span class=\"cm\">/* 給右孩子的雙親域賦值 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：若T為空二叉樹，則返回TRUE，否則FALSE */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">FALSE</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">TRUE</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">int</span> <span class=\"nf\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的深度 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"cm\">/* 空樹深度為0 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* i為左子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* j為右子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"o\">?</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"cm\">/* T的深度為其左右子樹的深度中的大者+1 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Root</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的根 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Value</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點。操作結果：返回p所指結點的值 */</span>\n   <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">Assign</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 給p所指結點賦值為value */</span>\n   <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">BiPTree</span> <span class=\"n\">QElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 設佇列元素為二叉樹的指針類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-2.h&quot; /* 鏈佇列 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-2.c&quot; /* 鏈佇列的基本操作 */</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">BiPTree</span> <span class=\"nf\">Point</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回二叉樹T中指向元素值為e的結點的指標。加 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根結點入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊，佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊左孩子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊右孩子 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Parent</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若e是T的非根結點，則返回它的雙親，否則返回＂空＂*/</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e是非根結點 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的雙親的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的左孩子。若e無左孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在左孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的左孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的右孩子。若e無右孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在右孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的右孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftSibling</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的左兄弟。若e是T的左孩子或無左兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">!=</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在左兄弟 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的左兄弟的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightSibling</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的右兄弟。若e是T的右孩子或無右兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">!=</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在右兄弟 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的右兄弟的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">InsertChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">,</span><span class=\"n\">BiPTree</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1，非空二叉樹c與T不相交且右子樹為空 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，插入c為T中p所指結點的左或右子樹。p所指結點 */</span>\n   <span class=\"cm\">/*           的原有左或右子樹則成為c的右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* c有右孩子(p原有左孩子) */</span>\n         <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* LR==1 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* c有右孩子(p原有右孩子) */</span>\n         <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">DeleteChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，刪除T中p所指結點的左或右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"cm\">/* 刪除左子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 刪除右子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PreOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 先序遞迴遍歷二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 先訪問根結點 */</span>\n     <span class=\"n\">PreOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 再先序遍歷左子樹 */</span>\n     <span class=\"n\">PreOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後先序遍歷右子樹 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">InOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 中序遞迴遍歷二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 中序遍歷左子樹 */</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 再訪問根結點 */</span>\n     <span class=\"n\">InOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後中序遍歷右子樹 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 後序遞迴遍歷二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後序遍歷左子樹 */</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後序遍歷右子樹 */</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後訪問根結點 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">LevelOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 層序遍歷二叉樹T(利用佇列) */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <p><br /></p> \n</div>","fragment_id":"广度优先遍历_3","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"訪問二叉樹的方法\"></span><span class=\"mw-headline\" id=\".E8.A8.AA.E5.95.8F.E4.BA.8C.E5.8F.89.E6.A8.B9.E7.9A.84.E6.96.B9.E6.B3.95\">访问二叉树的方法</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：访问二叉树的方法\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=13\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_4","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"前(先)序、中序、後序遍歷\"></span><span class=\"mw-headline\" id=\".E5.89.8D.28.E5.85.88.29.E5.BA.8F.E3.80.81.E4.B8.AD.E5.BA.8F.E3.80.81.E5.BE.8C.E5.BA.8F.E9.81.8D.E6.AD.B7\">前(先)序、中序、后序遍历</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：前(先)序、中序、后序遍历\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=14\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_5","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。","fragment_id":"广度优先遍历_6","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。","fragment_id":"广度优先遍历_7","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。","fragment_id":"广度优先遍历_8","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历<a title=\"二叉搜索树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%90%9C%E5%B0%8B%E6%A8%B9&amp;action=edit&amp;redlink=1\">二叉搜索树</a>时很常用，因为它能用递增的顺序来遍历所有的值。","fragment_id":"广度优先遍历_9","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"为什么呢？如果<i>n</i>是二叉搜索树的结点，那么<i>n</i>的左子树的所有结点的值都比n的值要小，而且<i>n</i>的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问<i>n</i>，然后顺序遍历右子树。我们就已经循序访问了整个树。","fragment_id":"广度优先遍历_10","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td><a title=\"一个简单的二叉树\" class=\"image\" href=\"/wiki/File:Binary_tree.png\"><img width=\"350\" height=\"203\" alt=\"一个简单的二叉树\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png\" data-file-height=\"758\" data-file-width=\"1305\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/525px-Binary_tree.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/700px-Binary_tree.png 2x\" /></a></td> \n  <td>在这个二叉树中， \n   <ul> \n    <li>前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4</li> \n    <li>后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2</li> \n    <li>中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9</li> \n   </ul> </td> \n </tr> \n</tbody>","fragment_id":"广度优先遍历_11","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<br /> 以上的<a title=\"递归\" class=\"mw-redirect\" href=\"/wiki/%E9%81%9E%E8%BF%B4\">递归</a>算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用<a title=\"反复运算（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%8F%8D%E8%A6%86%E9%81%8B%E7%AE%97&amp;action=edit&amp;redlink=1\">反复运算</a>算法，只使用常量空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：","fragment_id":"广度优先遍历_12","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next","fragment_id":"广度优先遍历_13","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td><a class=\"image\" href=\"/wiki/File:Bitree.JPG\"><img width=\"155\" height=\"161\" alt=\"Bitree.JPG\" src=\"//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG\" data-file-height=\"161\" data-file-width=\"155\" /></a></td> \n  <td>用二叉树表示下述表达式：a+b*(c-d)-e/f \n   <ul> \n    <li>先序遍历的序列是：-+a*b-cd/ef</li> \n    <li>中序遍历的序列是：a+b*c-d-e/f</li> \n    <li>后序遍历的序列是：abcd-*+ef/-</li> \n   </ul> </td> \n </tr> \n</tbody>","fragment_id":"广度优先遍历_14","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"深度優先遍歷\"></span><span class=\"mw-headline\" id=\".E6.B7.B1.E5.BA.A6.E5.84.AA.E5.85.88.E9.81.8D.E6.AD.B7\">深度优先遍历</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：深度优先遍历\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=15\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_15","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"在深度优先级中，我们希望从根结点访问最远的结点。和图的<a title=\"深度优先搜索\" href=\"/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">深度优先搜索</a>不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见<a title=\"深度优先搜索\" href=\"/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">深度优先搜索</a>。","fragment_id":"广度优先遍历_16","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"廣度優先遍歷\"></span><span class=\"mw-headline\" id=\".E5.BB.A3.E5.BA.A6.E5.84.AA.E5.85.88.E9.81.8D.E6.AD.B7\">广度优先遍历</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：广度优先遍历\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=16\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_17","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见<a title=\"广度优先搜索\" href=\"/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">广度优先搜索</a>。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。","fragment_id":"广度优先遍历_18","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"將n叉樹轉換為二叉樹\"></span><span class=\"mw-headline\" id=\".E5.B0.87n.E5.8F.89.E6.A8.B9.E8.BD.89.E6.8F.9B.E7.82.BA.E4.BA.8C.E5.8F.89.E6.A8.B9\">将n叉树转换为二叉树</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：将n叉树转换为二叉树\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=17\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_19","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<p><a title=\"将n叉树转换为二叉树的例子\" class=\"image\" href=\"/wiki/File:Nary_to_binary_tree_conversion.png\"><img width=\"400\" height=\"250\" alt=\"将n叉树转换为二叉树的例子\" src=\"//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png\" data-file-height=\"250\" data-file-width=\"400\" /></a></p>","fragment_id":"广度优先遍历_20","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"存儲結構與基本操作\"></span><span class=\"mw-headline\" id=\".E5.AD.98.E5.84.B2.E7.B5.90.E6.A7.8B.E8.88.87.E5.9F.BA.E6.9C.AC.E6.93.8D.E4.BD.9C\">存储结构与基本操作</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：存储结构与基本操作\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=18\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_21","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"樹的二叉鏈表存儲表示\"></span><span class=\"mw-headline\" id=\".E6.A8.B9.E7.9A.84.E4.BA.8C.E5.8F.89.E9.8F.88.E8.A1.A8.E5.AD.98.E5.84.B2.E8.A1.A8.E7.A4.BA\">树的二叉链表存储表示</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：树的二叉链表存储表示\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=19\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_22","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<a title=\"二叉树与森林相互转换的逻辑示意\" class=\"image\" href=\"/wiki/File:Hzxd.jpg\"><img width=\"300\" height=\"341\" alt=\"二叉树与森林相互转换的逻辑示意\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg\" data-file-height=\"664\" data-file-width=\"585\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/450px-Hzxd.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/a/a8/Hzxd.jpg 2x\" /></a>","fragment_id":"广度优先遍历_23","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"cm\">/* 樹的二叉鏈表(孩子—兄弟)存儲表示 */</span>\n <span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">CSNode</span>\n <span class=\"p\">{</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">struct</span> <span class=\"n\">CSNode</span> <span class=\"o\">*</span><span class=\"n\">firstchild</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n <span class=\"p\">}</span><span class=\"n\">CSNode</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">CSTree</span><span class=\"p\">;</span>\n</pre>","fragment_id":"广度优先遍历_24","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"樹的二叉鏈表存儲的基本操作\"></span><span class=\"mw-headline\" id=\".E6.A8.B9.E7.9A.84.E4.BA.8C.E5.8F.89.E9.8F.88.E8.A1.A8.E5.AD.98.E5.84.B2.E7.9A.84.E5.9F.BA.E6.9C.AC.E6.93.8D.E4.BD.9C\">树的二叉链表存储的基本操作</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：树的二叉链表存储的基本操作\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=20\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_25","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"NavHead\">\n 基于C/C++的算法实现\n <span class=\"NavToggle\" id=\"NavToggle3\">显示▼</span>\n</div> \n<div class=\"NavContent\" style=\"display: none;\"> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"cm\">/* 樹的二叉鏈表(孩子—兄弟)存儲的基本操作(17個) */</span>\n <span class=\"cp\">#define ClearTree DestroyTree </span><span class=\"cm\">/* 二者操作相同 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;func6-2.c&quot; /* 包括PreOrderTraverse() */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">InitTree</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 操作結果：構造空樹T */</span>\n   <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">DestroyTree</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：銷毀樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T有長子 */</span>\n       <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀T的長子為根結點的子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* T有下一個兄弟 */</span>\n       <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀T的下一個兄弟為根結點的子樹 */</span>\n     <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 釋放根結點 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">CSTree</span> <span class=\"n\">QElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 定義佇列元素類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-2.h&quot; /* 定義LinkQueue類型(鏈佇列) */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-2.c&quot; /* LinkQueue類型的基本操作 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">CreateTree</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 構造樹T */</span>\n   <span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">];</span> <span class=\"cm\">/* 臨時存放孩子結點(設不超過20個)的值 */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">;</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">;</span>\n   <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;請輸入根結點(字元型,空格為空): &quot;</span><span class=\"p\">);</span>\n   <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&quot;%c%*c&quot;</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">CSTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">CSNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 建立根結點 */</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊根結點的指針 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊一個結點的指標 */</span>\n       <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;請按長幼順序輸入結點%c的所有孩子: &quot;</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span>\n       <span class=\"n\">gets</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n       <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"cm\">/* 有孩子 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">CSTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">CSNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 建立長子結點 */</span>\n         <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n         <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">l</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"p\">{</span>\n           <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">CSTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">CSNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 建立下一個兄弟結點 */</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊上一個結點 */</span>\n           <span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n           <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n         <span class=\"p\">}</span>\n         <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊最後一個結點 */</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">else</span>\n         <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 長子指針為空 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">else</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 空樹 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">TreeEmpty</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：若T為空樹，則返回TURE，否則返回FALSE */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">FALSE</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">TRUE</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">int</span> <span class=\"nf\">TreeDepth</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：返回T的深度 */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">depth</span><span class=\"p\">,</span><span class=\"n\">max</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 樹空 */</span>\n     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 樹無長子 */</span>\n     <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span> <span class=\"cm\">/* 求子樹深度的最大值 */</span>\n     <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"n\">TreeDepth</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"o\">&gt;</span><span class=\"n\">max</span><span class=\"p\">)</span>\n       <span class=\"n\">max</span><span class=\"o\">=</span><span class=\"n\">depth</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹的深度=子樹深度最大值+1 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Value</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回p所指結點的值 */</span>\n   <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Root</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：返回T的根 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">CSTree</span> <span class=\"nf\">Point</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回二叉鏈表(孩子—兄弟)樹T中指向元素值為s的結點的指標。另加 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根結點入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊,佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\t <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有長子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊長子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 有下一個兄弟 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊下一個兄弟 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">Assign</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是樹T中結點的值。操作結果：改cur_e為value */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">cur_e</span><span class=\"p\">);</span> <span class=\"cm\">/* p為cur_e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到cur_e */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">;</span> <span class=\"cm\">/* 賦新值 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空或沒找到 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Parent</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若cur_e是T的非根結點，則返回它的雙親，否則函數值為＂空＂*/</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">;</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 樹非空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"n\">cur_e</span><span class=\"p\">)</span> <span class=\"cm\">/* 根結點值為cur_e */</span>\n       <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根結點入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* p有長子 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">cur_e</span><span class=\"p\">)</span> <span class=\"cm\">/* 長子為cur_e */</span>\n           <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 返回雙親 */</span>\n         <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">;</span> <span class=\"cm\">/* 雙親指針賦給t */</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向長子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊長子 */</span>\n         <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 有下一個兄弟 */</span>\n         <span class=\"p\">{</span>\n           <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向下一個兄弟 */</span>\n\t <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"n\">cur_e</span><span class=\"p\">)</span> <span class=\"cm\">/* 下一個兄弟為cur_e */</span>\n\t <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"cm\">/* 返回雙親 */</span>\n\t <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊下一個兄弟 */</span>\n\t <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空或沒找到cur_e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftChild</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若cur_e是T的非葉子結點，則返回它的最左孩子，否則返回＂空＂*/</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n   <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">cur_e</span><span class=\"p\">);</span> <span class=\"cm\">/* f指向結點cur_e */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到結點cur_e且結點cur_e有長子 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightSibling</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若cur_e有右兄弟，則返回它的右兄弟，否則返回＂空＂*/</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n   <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">cur_e</span><span class=\"p\">);</span> <span class=\"cm\">/* f指向結點cur_e */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到結點cur_e且結點cur_e有右兄弟 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">InsertChild</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">CSTree</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，p指向T中某個結點，1≦i≦p所指結點的度+1，非空樹c與T不相交 */</span>\n   <span class=\"cm\">/* 操作結果：插入c為T中p結點的第i棵子樹 */</span>\n   <span class=\"cm\">/* 因為p所指結點的位址不會改變，故p不需是參考類型 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"cm\">/* 插入c為p的長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* p的原長子現是c的下一個兄弟(c本無兄弟) */</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 找插入點 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* 指向p的長子 */</span>\n       <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n       <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"p\">)</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">==</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到插入位置 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">else</span> <span class=\"cm\">/* p原有孩子數小於i-1 */</span>\n         <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">else</span> <span class=\"cm\">/* T空 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">DeleteChild</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，p指向T中某個結點，1≦i≦p所指結點的度 */</span>\n   <span class=\"cm\">/* 操作結果：刪除T中p所指結點的第i棵子樹 */</span>\n   <span class=\"cm\">/* 因為p所指結點的位址不會改變，故p不需是參考類型 */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"cm\">/* 刪除長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p的原次子現是長子 */</span>\n       <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n       <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 刪除非長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向長子 */</span>\n       <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n       <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"p\">)</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">==</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到第i棵子樹 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n         <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">);</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">else</span> <span class=\"cm\">/* p原有孩子數小於i */</span>\n         <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 後根遍歷孩子—兄弟二叉鏈表結構的樹T */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後根遍歷長子子樹 */</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向長子的下一個兄弟 */</span>\n       <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後根遍歷下一個兄弟子樹 */</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向再下一個兄弟 */</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">));</span> <span class=\"cm\">/* 最後訪問根結點 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">LevelOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 層序遍歷孩子—兄弟二叉鏈表結構的樹T */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">));</span> <span class=\"cm\">/* 先訪問根結點 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊根結點的指針 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊一個結點的指標 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有長子 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span>\n         <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">));</span> <span class=\"cm\">/* 訪問長子結點 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊長子結點的指針 */</span>\n         <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 有下一個兄弟 */</span>\n         <span class=\"p\">{</span>\n           <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n           <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">));</span> <span class=\"cm\">/* 訪問下一個兄弟 */</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊兄弟結點的指針 */</span>\n         <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n</div>","fragment_id":"广度优先遍历_26","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"線索二叉樹_(threaded_binary_tree)\"></span><span class=\"mw-headline\" id=\".E7.B7.9A.E7.B4.A2.E4.BA.8C.E5.8F.89.E6.A8.B9_.28threaded_binary_tree.29\">线索二叉树 (threaded binary tree)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：线索二叉树 (threaded binary tree)\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=21\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_27","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。 <a class=\"image\" href=\"/wiki/File:Tbt1.jpg\"><img width=\"415\" height=\"62\" alt=\"Tbt1.jpg\" src=\"//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg\" data-file-height=\"62\" data-file-width=\"415\" /></a>","fragment_id":"广度优先遍历_28","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。<br /> 在后序线索树中找到结点的后继分三种情况：","fragment_id":"广度优先遍历_29","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li>若结点是二叉树的根，则其后继为空；</li> \n<li>若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点；</li> \n<li>若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。</li>","fragment_id":"广度优先遍历_30","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"二叉線索存儲表示\"></span><span class=\"mw-headline\" id=\".E4.BA.8C.E5.8F.89.E7.B7.9A.E7.B4.A2.E5.AD.98.E5.84.B2.E8.A1.A8.E7.A4.BA\">二叉线索存储表示</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：二叉线索存储表示\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=22\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"广度优先遍历_31","scratchTime":"2017-10-28 15:34:47.0","type":"leaf","flag":"fragment"}]}]},{"totalbranchlevel":1,"facet_name":"转换","totalbranchnum":1,"type":"branch","totalleafnum":1,"children":[{"totalbranchlevel":0,"facet_name":"存储结构与基本操作","totalbranchnum":0,"type":"branch","totalleafnum":37,"children":[{"url":"","content":"<div class=\"NavHead\">\n 基于C/C++的实现算法\n <span class=\"NavToggle\" id=\"NavToggle1\">显示▼</span>\n</div> \n<div class=\"NavContent\" style=\"display: none;\"> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"cm\">/* 二叉樹的二叉鏈表存儲的基本操作(22個) */</span>\n <span class=\"cp\">#define ClearBiTree DestroyBiTree </span><span class=\"cm\">/* 清空二叉樹和銷毀二叉樹的操作一樣 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;func6-3.c&quot;</span>\n <span class=\"cm\">/* 包括InitBiTree()、DestroyBiTree()、PreOrderTraverse()和InOrderTraverse()4函數 */</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">CreateBiTree</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 演算法6.4：按先序次序輸入二叉樹中結點的值(可為字元型或整型，在主程中定義)，*/</span>\n   <span class=\"cm\">/* 構造二叉鏈表表示的二叉樹T。變數Nil表示空(子)樹。有改動 */</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n   <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">ch</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n   <span class=\"p\">{</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">BiTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BiTNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 生成根結點 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n       <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">OVERFLOW</span><span class=\"p\">);</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">ch</span><span class=\"p\">;</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造左子樹 */</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造右子樹 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：若T為空二叉樹，則返回TRUE，否則FALSE */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">FALSE</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">TRUE</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">int</span> <span class=\"nf\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的深度 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">==</span><span class=\"nb\">NULL</span><span class=\"p\">)</span>  <span class=\"cm\">/*如果T=NULL,这样写便于理解，当然也可以写成if（!T）*/</span><span class=\"p\">;</span> \n     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"cm\">/* 空樹深度為0 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* i為左子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* j為右子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"o\">?</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"cm\">/* T的深度為其左右子樹的深度中的大者+1 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Root</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的根 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Value</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點。操作結果：返回p所指結點的值 */</span>\n   <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">Assign</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 給p所指結點賦值為value */</span>\n   <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">BiTree</span> <span class=\"n\">QElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 設佇列元素為二叉樹的指針類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-2.h&quot; /* 鏈佇列 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-2.c&quot; /* 鏈佇列的基本操作 */</span>\n <span class=\"n\">TElemType</span> <span class=\"nf\">Parent</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若e是T的非根結點，則返回它的雙親，否則返回＂空＂*/</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 樹根指針入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊，佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"o\">||</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span>\n       <span class=\"cm\">/* 找到e(是其左或右孩子) */</span>\n         <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的雙親的值 */</span>\n       <span class=\"k\">else</span> <span class=\"cm\">/* 沒找到e，則入隊其左右孩子指針(如果非空) */</span>\n       <span class=\"p\">{</span>\n         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空或沒找到e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">BiTree</span> <span class=\"nf\">Point</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回二叉樹T中指向元素值為s的結點的指標。另加 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根指針入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊，佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">s</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊左孩子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊右孩子 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的左孩子。若e無左孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在左孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的左孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的右孩子。若e無右孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在右孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的右孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftSibling</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的左兄弟。若e是T的左孩子或無左兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Parent</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a為e的雙親 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e的雙親 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* p為指向結點a的指標 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"cm\">/* p存在左右孩子且右孩子是e */</span>\n         <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回p的左孩子(e的左兄弟) */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightSibling</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的右兄弟。若e是T的右孩子或無右兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Parent</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a為e的雙親 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到e的雙親 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* p為指向結點a的指標 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"cm\">/* p存在左右孩子且左孩子是e */</span>\n         <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回p的右孩子(e的右兄弟) */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">InsertChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">,</span><span class=\"n\">BiTree</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1，非空二叉樹c與T不相交且右子樹為空 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，插入c為T中p所指結點的左或右子樹。p所指結點的 */</span>\n   <span class=\"cm\">/*           原有左或右子樹則成為c的右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* LR==1 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">DeleteChild</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，刪除T中p所指結點的左或右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"cm\">/* 刪除左子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 刪除右子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">BiTree</span> <span class=\"n\">SElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 設棧元素為二叉樹的指針類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-1.h&quot; /* 順序棧 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-1.c&quot; /* 順序棧的基本操作 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">InOrderTraverse1</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 採用二叉鏈表存儲結構，Visit是對資料元素操作的應用函數。演算法6.3，有改動 */</span>\n   <span class=\"cm\">/* 中序遍歷二叉樹T的非遞迴演算法(利用棧)，對每個資料元素調用函數Visit */</span>\n   <span class=\"n\">SqStack</span> <span class=\"n\">S</span><span class=\"p\">;</span>\n   <span class=\"n\">InitStack</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">);</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">||!</span><span class=\"n\">StackEmpty</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span> <span class=\"cm\">/* 根指針進棧，遍歷左子樹 */</span>\n       <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span>\n       <span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span>\n     <span class=\"p\">{</span> <span class=\"cm\">/* 根指針退棧，訪問根結點，遍歷右子樹 */</span>\n       <span class=\"n\">Pop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">);</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span>\n       <span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">InOrderTraverse2</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 採用二叉鏈表存儲結構，Visit是對資料元素操作的應用函數。演算法6.2，有改動 */</span>\n   <span class=\"cm\">/* 中序遍歷二叉樹T的非遞迴演算法(利用棧)，對每個資料元素調用函數Visit */</span>\n   <span class=\"n\">SqStack</span> <span class=\"n\">S</span><span class=\"p\">;</span>\n   <span class=\"n\">BiTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"n\">InitStack</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">);</span>\n   <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根指針進棧 */</span>\n   <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">StackEmpty</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">GetTop</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">p</span><span class=\"p\">)</span>\n       <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 向左走到盡頭 */</span>\n     <span class=\"n\">Pop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 空指針退棧 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">StackEmpty</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">))</span>\n     <span class=\"p\">{</span> <span class=\"cm\">/* 訪問結點，向右一步 */</span>\n       <span class=\"n\">Pop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span>\n       <span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，Visit是對結點操作的應用函數 */</span>\n   <span class=\"cm\">/* 操作結果：後序遞迴遍歷T，對每個結點調用函數Visit一次且僅一次 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 先後序遍歷左子樹 */</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 再後序遍歷右子樹 */</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後訪問根結點 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">LevelOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，Visit是對結點操作的應用函數 */</span>\n   <span class=\"cm\">/* 操作結果：層序遞迴遍歷T(利用佇列)，對每個結點調用函數Visit一次且僅一次 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列q */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根指針入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 佇列不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊元素(指標),賦給a */</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span> <span class=\"cm\">/* 訪問a所指結點 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"cm\">/* a有左孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊a的左孩子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"cm\">/* a有右孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊a的右孩子 */</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n</div>","fragment_id":"树的二叉链表存储表示_1","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"三叉鏈表存儲表示\"></span><span class=\"mw-headline\" id=\".E4.B8.89.E5.8F.89.E9.8F.88.E8.A1.A8.E5.AD.98.E5.84.B2.E8.A1.A8.E7.A4.BA\">三叉链表存储表示</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：三叉链表存储表示\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=10\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储表示_2","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<a title=\"基于三叉链表的二叉树的逻辑结构\" class=\"image\" href=\"/wiki/File:3clb.jpg\"><img width=\"537\" height=\"258\" alt=\"基于三叉链表的二叉树的逻辑结构\" src=\"//upload.wikimedia.org/wikipedia/commons/6/60/3clb.jpg\" data-file-height=\"258\" data-file-width=\"537\" /></a>","fragment_id":"树的二叉链表存储表示_3","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"存儲結構_2\"></span><span class=\"mw-headline\" id=\".E5.AD.98.E5.84.B2.E7.B5.90.E6.A7.8B_2\">存储结构</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：存储结构\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=11\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储表示_4","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"cm\">/* 二叉樹的三叉鏈表存儲表示 */</span>\n <span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">BiTPNode</span>\n <span class=\"p\">{</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">struct</span> <span class=\"n\">BiTPNode</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"cm\">/* 父、左右孩子指針 */</span>\n <span class=\"p\">}</span><span class=\"n\">BiTPNode</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">BiPTree</span><span class=\"p\">;</span>\n</pre>","fragment_id":"树的二叉链表存储表示_5","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"NavHead\">\n 基于C/C++的实现算法\n <span class=\"NavToggle\" id=\"NavToggle2\">显示▼</span>\n</div> \n<div class=\"NavContent\" style=\"display: none;\"> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"cm\">/* 二叉樹的三叉鏈表存儲的基本操作(21個) */</span>\n <span class=\"cp\">#define ClearBiTree DestroyBiTree </span><span class=\"cm\">/* 清空二叉樹和銷毀二叉樹的操作一樣 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">InitBiTree</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 操作結果：構造空二叉樹T */</span>\n   <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">DestroyBiTree</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：銷毀二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n       <span class=\"n\">DestroyBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀左孩子子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n       <span class=\"n\">DestroyBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀右孩子子樹 */</span>\n     <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 釋放根結點 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 空指針賦0 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">CreateBiTree</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 按先序次序輸入二叉樹中結點的值(可為字元型或整型，在主程中定義)，*/</span>\n   <span class=\"cm\">/* 構造三叉鏈表表示的二叉樹T */</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">ch</span><span class=\"p\">;</span>\n   <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">ch</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"o\">==</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 空 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n   <span class=\"p\">{</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">BiTPNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 動態生成根結點 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n       <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">OVERFLOW</span><span class=\"p\">);</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">ch</span><span class=\"p\">;</span> <span class=\"cm\">/* 給根結點賦值 */</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 根結點無雙親 */</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造左子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n       <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=*</span><span class=\"n\">T</span><span class=\"p\">;</span> <span class=\"cm\">/* 給左孩子的雙親域賦值 */</span>\n     <span class=\"n\">CreateBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 構造右子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n       <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=*</span><span class=\"n\">T</span><span class=\"p\">;</span> <span class=\"cm\">/* 給右孩子的雙親域賦值 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">BiTreeEmpty</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：若T為空二叉樹，則返回TRUE，否則FALSE */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">FALSE</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">TRUE</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">int</span> <span class=\"nf\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的深度 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"cm\">/* 空樹深度為0 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* i為左子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">BiTreeDepth</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* j為右子樹的深度 */</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"o\">?</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"cm\">/* T的深度為其左右子樹的深度中的大者+1 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Root</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在。操作結果：返回T的根 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Value</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點。操作結果：返回p所指結點的值 */</span>\n   <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">Assign</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 給p所指結點賦值為value */</span>\n   <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">BiPTree</span> <span class=\"n\">QElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 設佇列元素為二叉樹的指針類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-2.h&quot; /* 鏈佇列 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-2.c&quot; /* 鏈佇列的基本操作 */</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">BiPTree</span> <span class=\"nf\">Point</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回二叉樹T中指向元素值為e的結點的指標。加 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根結點入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊，佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">e</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有左孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊左孩子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有右孩子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊右孩子 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Parent</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若e是T的非根結點，則返回它的雙親，否則返回＂空＂*/</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e是非根結點 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的雙親的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的左孩子。若e無左孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在左孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的左孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點。操作結果：返回e的右孩子。若e無右孩子,則返回&quot;空&quot; */</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在右孩子 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的右孩子的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftSibling</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的左兄弟。若e是T的左孩子或無左兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">!=</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在左兄弟 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的左兄弟的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightSibling</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：返回e的右兄弟。若e是T的右孩子或無右兄弟，則返回＂空＂*/</span>\n   <span class=\"n\">BiPTree</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">e</span><span class=\"p\">);</span> <span class=\"cm\">/* a是結點e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">!=</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">!=</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"cm\">/* T中存在結點e且e存在右兄弟 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span> <span class=\"cm\">/* 返回e的右兄弟的值 */</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 其餘情況返回空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">InsertChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">,</span><span class=\"n\">BiPTree</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1，非空二叉樹c與T不相交且右子樹為空 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，插入c為T中p所指結點的左或右子樹。p所指結點 */</span>\n   <span class=\"cm\">/*           的原有左或右子樹則成為c的右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* c有右孩子(p原有左孩子) */</span>\n         <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* LR==1 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">)</span> <span class=\"cm\">/* c有右孩子(p原有右孩子) */</span>\n         <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">DeleteChild</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">LR</span><span class=\"p\">)</span> <span class=\"cm\">/* 形參T無用 */</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：二叉樹T存在，p指向T中某個結點，LR為0或1 */</span>\n   <span class=\"cm\">/* 操作結果：根據LR為0或1，刪除T中p所指結點的左或右子樹 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* p不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">LR</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"cm\">/* 刪除左子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 刪除右子樹 */</span>\n       <span class=\"n\">ClearBiTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* p空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PreOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 先序遞迴遍歷二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 先訪問根結點 */</span>\n     <span class=\"n\">PreOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 再先序遍歷左子樹 */</span>\n     <span class=\"n\">PreOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後先序遍歷右子樹 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">InOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 中序遞迴遍歷二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 中序遍歷左子樹 */</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 再訪問根結點 */</span>\n     <span class=\"n\">InOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後中序遍歷右子樹 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 後序遞迴遍歷二叉樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後序遍歷左子樹 */</span>\n     <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後序遍歷右子樹 */</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 最後訪問根結點 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">LevelOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">BiPTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">BiPTree</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 層序遍歷二叉樹T(利用佇列) */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n       <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">lchild</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"o\">!=</span><span class=\"nb\">NULL</span><span class=\"p\">)</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">rchild</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <p><br /></p> \n</div>","fragment_id":"树的二叉链表存储的基本操作_1","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"訪問二叉樹的方法\"></span><span class=\"mw-headline\" id=\".E8.A8.AA.E5.95.8F.E4.BA.8C.E5.8F.89.E6.A8.B9.E7.9A.84.E6.96.B9.E6.B3.95\">访问二叉树的方法</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：访问二叉树的方法\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=13\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_2","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"前(先)序、中序、後序遍歷\"></span><span class=\"mw-headline\" id=\".E5.89.8D.28.E5.85.88.29.E5.BA.8F.E3.80.81.E4.B8.AD.E5.BA.8F.E3.80.81.E5.BE.8C.E5.BA.8F.E9.81.8D.E6.AD.B7\">前(先)序、中序、后序遍历</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：前(先)序、中序、后序遍历\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=14\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_3","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"遍历二叉树：L、D、R分别表示遍历左子树、访问根结点和遍历右子树，则先(根)序遍历二叉树的顺序是DLR，中(根)序遍历二叉树的顺序是LDR，后(根)序遍历二叉树的顺序是LRD。还有按层遍历二叉树。这些方法的时间复杂度都是O(n)，n为结点个数。","fragment_id":"树的二叉链表存储的基本操作_4","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"如果T2是由有序树T转换而来的二叉树，那么T中结点的前序就是T2中结点的前序，T中结点的后序就是T2中结点的中序。任何一棵二叉树的叶结点在先序、中序和后序遍历中的相对次序不发改变。设n,m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是n在m的左方。前序序列和中序序列相同的二叉树为空树或任一结点均无左孩子的非空二叉树；中序序列和后序序列相同的二叉树为空树或任一结点均无右孩子的非空二叉树；前序序列和后序序列相同的二叉树为空树或仅有一个结点的二叉树。","fragment_id":"树的二叉链表存储的基本操作_5","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"这样会用前序打印出树中的值。在前序，每个结点在访问它的子结点之前访问。类似地，如果打印语句在最后，每个结点在访问他的子节点之后访问，树中的值会用后序来打印。在这两种情况中，左子树中的值比右子树中得值先打印。","fragment_id":"树的二叉链表存储的基本操作_6","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"最后，上面的中序遍历，每个结点在访问左子树和右子树之间访问。这在遍历<a title=\"二叉搜索树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%90%9C%E5%B0%8B%E6%A8%B9&amp;action=edit&amp;redlink=1\">二叉搜索树</a>时很常用，因为它能用递增的顺序来遍历所有的值。","fragment_id":"树的二叉链表存储的基本操作_7","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"为什么呢？如果<i>n</i>是二叉搜索树的结点，那么<i>n</i>的左子树的所有结点的值都比n的值要小，而且<i>n</i>的右子树的所有节点的值都比n的值要大。因此，如果我们顺序遍历左子树，然后访问<i>n</i>，然后顺序遍历右子树。我们就已经循序访问了整个树。","fragment_id":"树的二叉链表存储的基本操作_8","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td><a title=\"一个简单的二叉树\" class=\"image\" href=\"/wiki/File:Binary_tree.png\"><img width=\"350\" height=\"203\" alt=\"一个简单的二叉树\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/350px-Binary_tree.png\" data-file-height=\"758\" data-file-width=\"1305\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/525px-Binary_tree.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Binary_tree.png/700px-Binary_tree.png 2x\" /></a></td> \n  <td>在这个二叉树中， \n   <ul> \n    <li>前序遍历的结果：2, 7, 2, 6, 5, 11, 5, 9, 4</li> \n    <li>后序遍历的结果：2, 5, 11, 6, 7, 4, 9, 5, 2</li> \n    <li>中序遍历的结果：2, 7, 5, 6, 11, 2, 5, 4, 9</li> \n   </ul> </td> \n </tr> \n</tbody>","fragment_id":"树的二叉链表存储的基本操作_9","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<br /> 以上的<a title=\"递归\" class=\"mw-redirect\" href=\"/wiki/%E9%81%9E%E8%BF%B4\">递归</a>算法使用与树的高度成比例的栈空间。如果我们在每个结点中存储指向父结点的指针，那样可以使用<a title=\"反复运算（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%8F%8D%E8%A6%86%E9%81%8B%E7%AE%97&amp;action=edit&amp;redlink=1\">反复运算</a>算法，只使用常量空间实现所有这些遍历。然而，指向父结点的指针占用更多的空间。这只在需要指向父节点的指针或栈空间有限时才使用。例如， 这是一个中序遍历的反复运算算法：","fragment_id":"树的二叉链表存储的基本操作_10","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"visit(root)\n    prev    := null\n    current := root\n    next    := null\n    \n    while current != null\n        if prev == current.parent\n            prev := current\n            next := current.left\n        if next == null or prev == current.left\n            print current.value\n            prev := current\n            next := current.right\n        if next == null or prev == current.right\n            prev := current\n            next := current.parent\n        current := next","fragment_id":"树的二叉链表存储的基本操作_11","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td><a class=\"image\" href=\"/wiki/File:Bitree.JPG\"><img width=\"155\" height=\"161\" alt=\"Bitree.JPG\" src=\"//upload.wikimedia.org/wikipedia/commons/f/fe/Bitree.JPG\" data-file-height=\"161\" data-file-width=\"155\" /></a></td> \n  <td>用二叉树表示下述表达式：a+b*(c-d)-e/f \n   <ul> \n    <li>先序遍历的序列是：-+a*b-cd/ef</li> \n    <li>中序遍历的序列是：a+b*c-d-e/f</li> \n    <li>后序遍历的序列是：abcd-*+ef/-</li> \n   </ul> </td> \n </tr> \n</tbody>","fragment_id":"树的二叉链表存储的基本操作_12","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"深度優先遍歷\"></span><span class=\"mw-headline\" id=\".E6.B7.B1.E5.BA.A6.E5.84.AA.E5.85.88.E9.81.8D.E6.AD.B7\">深度优先遍历</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：深度优先遍历\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=15\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_13","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"在深度优先级中，我们希望从根结点访问最远的结点。和图的<a title=\"深度优先搜索\" href=\"/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">深度优先搜索</a>不同的是，不需记住访问过的每一个结点，因为树中不会有环。前序，中序和后序遍历都是深度优先遍历的特例。参见<a title=\"深度优先搜索\" href=\"/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">深度优先搜索</a>。","fragment_id":"树的二叉链表存储的基本操作_14","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"廣度優先遍歷\"></span><span class=\"mw-headline\" id=\".E5.BB.A3.E5.BA.A6.E5.84.AA.E5.85.88.E9.81.8D.E6.AD.B7\">广度优先遍历</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：广度优先遍历\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=16\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_15","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。参见<a title=\"广度优先搜索\" href=\"/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">广度优先搜索</a>。 二叉树的广度优先遍历又称按层次遍历。算法借助队列实现。","fragment_id":"树的二叉链表存储的基本操作_16","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"將n叉樹轉換為二叉樹\"></span><span class=\"mw-headline\" id=\".E5.B0.87n.E5.8F.89.E6.A8.B9.E8.BD.89.E6.8F.9B.E7.82.BA.E4.BA.8C.E5.8F.89.E6.A8.B9\">将n叉树转换为二叉树</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：将n叉树转换为二叉树\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=17\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_17","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<p><a title=\"将n叉树转换为二叉树的例子\" class=\"image\" href=\"/wiki/File:Nary_to_binary_tree_conversion.png\"><img width=\"400\" height=\"250\" alt=\"将n叉树转换为二叉树的例子\" src=\"//upload.wikimedia.org/wikipedia/commons/0/02/Nary_to_binary_tree_conversion.png\" data-file-height=\"250\" data-file-width=\"400\" /></a></p>","fragment_id":"树的二叉链表存储的基本操作_18","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"存儲結構與基本操作\"></span><span class=\"mw-headline\" id=\".E5.AD.98.E5.84.B2.E7.B5.90.E6.A7.8B.E8.88.87.E5.9F.BA.E6.9C.AC.E6.93.8D.E4.BD.9C\">存储结构与基本操作</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：存储结构与基本操作\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=18\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_19","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"樹的二叉鏈表存儲表示\"></span><span class=\"mw-headline\" id=\".E6.A8.B9.E7.9A.84.E4.BA.8C.E5.8F.89.E9.8F.88.E8.A1.A8.E5.AD.98.E5.84.B2.E8.A1.A8.E7.A4.BA\">树的二叉链表存储表示</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：树的二叉链表存储表示\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=19\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_20","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<a title=\"二叉树与森林相互转换的逻辑示意\" class=\"image\" href=\"/wiki/File:Hzxd.jpg\"><img width=\"300\" height=\"341\" alt=\"二叉树与森林相互转换的逻辑示意\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/300px-Hzxd.jpg\" data-file-height=\"664\" data-file-width=\"585\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Hzxd.jpg/450px-Hzxd.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/a/a8/Hzxd.jpg 2x\" /></a>","fragment_id":"树的二叉链表存储的基本操作_21","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"cm\">/* 樹的二叉鏈表(孩子—兄弟)存儲表示 */</span>\n <span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">CSNode</span>\n <span class=\"p\">{</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">struct</span> <span class=\"n\">CSNode</span> <span class=\"o\">*</span><span class=\"n\">firstchild</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n <span class=\"p\">}</span><span class=\"n\">CSNode</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">CSTree</span><span class=\"p\">;</span>\n</pre>","fragment_id":"树的二叉链表存储的基本操作_22","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"樹的二叉鏈表存儲的基本操作\"></span><span class=\"mw-headline\" id=\".E6.A8.B9.E7.9A.84.E4.BA.8C.E5.8F.89.E9.8F.88.E8.A1.A8.E5.AD.98.E5.84.B2.E7.9A.84.E5.9F.BA.E6.9C.AC.E6.93.8D.E4.BD.9C\">树的二叉链表存储的基本操作</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：树的二叉链表存储的基本操作\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=20\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_23","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"NavHead\">\n 基于C/C++的算法实现\n <span class=\"NavToggle\" id=\"NavToggle3\">显示▼</span>\n</div> \n<div class=\"NavContent\" style=\"display: none;\"> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"cm\">/* 樹的二叉鏈表(孩子—兄弟)存儲的基本操作(17個) */</span>\n <span class=\"cp\">#define ClearTree DestroyTree </span><span class=\"cm\">/* 二者操作相同 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;func6-2.c&quot; /* 包括PreOrderTraverse() */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">InitTree</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 操作結果：構造空樹T */</span>\n   <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">DestroyTree</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：銷毀樹T */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* T有長子 */</span>\n       <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀T的長子為根結點的子樹 */</span>\n     <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* T有下一個兄弟 */</span>\n       <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">);</span> <span class=\"cm\">/* 銷毀T的下一個兄弟為根結點的子樹 */</span>\n     <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 釋放根結點 */</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"k\">typedef</span> <span class=\"n\">CSTree</span> <span class=\"n\">QElemType</span><span class=\"p\">;</span> <span class=\"cm\">/* 定義佇列元素類型 */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;c3-2.h&quot; /* 定義LinkQueue類型(鏈佇列) */</span>\n <span class=\"cp\">#include</span><span class=\"cpf\">&quot;bo3-2.c&quot; /* LinkQueue類型的基本操作 */</span>\n <span class=\"kt\">void</span> <span class=\"nf\">CreateTree</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 構造樹T */</span>\n   <span class=\"kt\">char</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">];</span> <span class=\"cm\">/* 臨時存放孩子結點(設不超過20個)的值 */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">;</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">;</span>\n   <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n   <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;請輸入根結點(字元型,空格為空): &quot;</span><span class=\"p\">);</span>\n   <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">&quot;%c%*c&quot;</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">!=</span><span class=\"n\">Nil</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">CSTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">CSNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 建立根結點 */</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n     <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊根結點的指針 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊一個結點的指標 */</span>\n       <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;請按長幼順序輸入結點%c的所有孩子: &quot;</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span>\n       <span class=\"n\">gets</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n       <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"cm\">/* 有孩子 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">CSTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">CSNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 建立長子結點 */</span>\n         <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n         <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">l</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n         <span class=\"p\">{</span>\n           <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">CSTree</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">CSNode</span><span class=\"p\">));</span> <span class=\"cm\">/* 建立下一個兄弟結點 */</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊上一個結點 */</span>\n           <span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n           <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n         <span class=\"p\">}</span>\n         <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊最後一個結點 */</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">else</span>\n         <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 長子指針為空 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">else</span>\n     <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span> <span class=\"cm\">/* 空樹 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">TreeEmpty</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：若T為空樹，則返回TURE，否則返回FALSE */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">FALSE</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">TRUE</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">int</span> <span class=\"nf\">TreeDepth</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：返回T的深度 */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">depth</span><span class=\"p\">,</span><span class=\"n\">max</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 樹空 */</span>\n     <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 樹無長子 */</span>\n     <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span> <span class=\"cm\">/* 求子樹深度的最大值 */</span>\n     <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"n\">TreeDepth</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"o\">&gt;</span><span class=\"n\">max</span><span class=\"p\">)</span>\n       <span class=\"n\">max</span><span class=\"o\">=</span><span class=\"n\">depth</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">max</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹的深度=子樹深度最大值+1 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Value</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回p所指結點的值 */</span>\n   <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Root</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在。操作結果：返回T的根 */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">CSTree</span> <span class=\"nf\">Point</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 返回二叉鏈表(孩子—兄弟)樹T中指向元素值為s的結點的指標。另加 */</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">QElemType</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"cm\">/* 初始化佇列 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根結點入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊,佇列元素賦給a */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\t <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有長子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊長子 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 有下一個兄弟 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊下一個兄弟 */</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">Assign</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是樹T中結點的值。操作結果：改cur_e為value */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 非空樹 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">cur_e</span><span class=\"p\">);</span> <span class=\"cm\">/* p為cur_e的指針 */</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到cur_e */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">;</span> <span class=\"cm\">/* 賦新值 */</span>\n       <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空或沒找到 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">Parent</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若cur_e是T的非根結點，則返回它的雙親，否則函數值為＂空＂*/</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">;</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* 樹非空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"n\">cur_e</span><span class=\"p\">)</span> <span class=\"cm\">/* 根結點值為cur_e */</span>\n       <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 根結點入隊 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* p有長子 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"o\">==</span><span class=\"n\">cur_e</span><span class=\"p\">)</span> <span class=\"cm\">/* 長子為cur_e */</span>\n           <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 返回雙親 */</span>\n         <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">;</span> <span class=\"cm\">/* 雙親指針賦給t */</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向長子 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊長子 */</span>\n         <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 有下一個兄弟 */</span>\n         <span class=\"p\">{</span>\n           <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向下一個兄弟 */</span>\n\t <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"n\">cur_e</span><span class=\"p\">)</span> <span class=\"cm\">/* 下一個兄弟為cur_e */</span>\n\t <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span> <span class=\"cm\">/* 返回雙親 */</span>\n\t <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊下一個兄弟 */</span>\n\t <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空或沒找到cur_e */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">LeftChild</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若cur_e是T的非葉子結點，則返回它的最左孩子，否則返回＂空＂*/</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n   <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">cur_e</span><span class=\"p\">);</span> <span class=\"cm\">/* f指向結點cur_e */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到結點cur_e且結點cur_e有長子 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">TElemType</span> <span class=\"nf\">RightSibling</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">TElemType</span> <span class=\"n\">cur_e</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，cur_e是T中某個結點 */</span>\n   <span class=\"cm\">/* 操作結果：若cur_e有右兄弟，則返回它的右兄弟，否則返回＂空＂*/</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n   <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">cur_e</span><span class=\"p\">);</span> <span class=\"cm\">/* f指向結點cur_e */</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到結點cur_e且結點cur_e有右兄弟 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">Nil</span><span class=\"p\">;</span> <span class=\"cm\">/* 樹空 */</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">InsertChild</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">CSTree</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，p指向T中某個結點，1≦i≦p所指結點的度+1，非空樹c與T不相交 */</span>\n   <span class=\"cm\">/* 操作結果：插入c為T中p結點的第i棵子樹 */</span>\n   <span class=\"cm\">/* 因為p所指結點的位址不會改變，故p不需是參考類型 */</span>\n   <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"cm\">/* 插入c為p的長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* p的原長子現是c的下一個兄弟(c本無兄弟) */</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 找插入點 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* 指向p的長子 */</span>\n       <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n       <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"p\">)</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">==</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到插入位置 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">else</span> <span class=\"cm\">/* p原有孩子數小於i-1 */</span>\n         <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">else</span> <span class=\"cm\">/* T空 */</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"n\">Status</span> <span class=\"nf\">DeleteChild</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 初始條件：樹T存在，p指向T中某個結點，1≦i≦p所指結點的度 */</span>\n   <span class=\"cm\">/* 操作結果：刪除T中p所指結點的第i棵子樹 */</span>\n   <span class=\"cm\">/* 因為p所指結點的位址不會改變，故p不需是參考類型 */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n   <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"cm\">/* T不空 */</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"cm\">/* 刪除長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span>\n       <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p的原次子現是長子 */</span>\n       <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n       <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span> <span class=\"cm\">/* 刪除非長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向長子 */</span>\n       <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n       <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">j</span><span class=\"p\">)</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">==</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"cm\">/* 找到第i棵子樹 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n         <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n         <span class=\"n\">DestroyTree</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">);</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">else</span> <span class=\"cm\">/* p原有孩子數小於i */</span>\n         <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">return</span> <span class=\"n\">OK</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">else</span>\n     <span class=\"k\">return</span> <span class=\"n\">ERROR</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 後根遍歷孩子—兄弟二叉鏈表結構的樹T */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有長子 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後根遍歷長子子樹 */</span>\n       <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向長子的下一個兄弟 */</span>\n       <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">PostOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">Visit</span><span class=\"p\">);</span> <span class=\"cm\">/* 後根遍歷下一個兄弟子樹 */</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span> <span class=\"cm\">/* p指向再下一個兄弟 */</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">));</span> <span class=\"cm\">/* 最後訪問根結點 */</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n <div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"> \n  <pre> <span class=\"kt\">void</span> <span class=\"nf\">LevelOrderTraverse</span><span class=\"p\">(</span><span class=\"n\">CSTree</span> <span class=\"n\">T</span><span class=\"p\">,</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Visit</span><span class=\"p\">)(</span><span class=\"n\">TElemType</span><span class=\"p\">))</span>\n <span class=\"p\">{</span> <span class=\"cm\">/* 層序遍歷孩子—兄弟二叉鏈表結構的樹T */</span>\n   <span class=\"n\">CSTree</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n   <span class=\"n\">LinkQueue</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n   <span class=\"n\">InitQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span>\n   <span class=\"p\">{</span>\n     <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">));</span> <span class=\"cm\">/* 先訪問根結點 */</span>\n     <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊根結點的指針 */</span>\n     <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">QueueEmpty</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"cm\">/* 隊不空 */</span>\n     <span class=\"p\">{</span>\n       <span class=\"n\">DeQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 出隊一個結點的指標 */</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">)</span> <span class=\"cm\">/* 有長子 */</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">firstchild</span><span class=\"p\">;</span>\n         <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">));</span> <span class=\"cm\">/* 訪問長子結點 */</span>\n         <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊長子結點的指針 */</span>\n         <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">)</span> <span class=\"cm\">/* 有下一個兄弟 */</span>\n         <span class=\"p\">{</span>\n           <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">nextsibling</span><span class=\"p\">;</span>\n           <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">));</span> <span class=\"cm\">/* 訪問下一個兄弟 */</span>\n           <span class=\"n\">EnQueue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">);</span> <span class=\"cm\">/* 入隊兄弟結點的指針 */</span>\n         <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>\n </div> \n</div>","fragment_id":"树的二叉链表存储的基本操作_24","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"線索二叉樹_(threaded_binary_tree)\"></span><span class=\"mw-headline\" id=\".E7.B7.9A.E7.B4.A2.E4.BA.8C.E5.8F.89.E6.A8.B9_.28threaded_binary_tree.29\">线索二叉树 (threaded binary tree)</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：线索二叉树 (threaded binary tree)\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=21\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_25","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"线索二叉树(保留遍历时结点在任一序列的前驱和后继的信息)：若结点有左子树，则其lchild域指示其左孩子，否则令lchild域指示其前驱；若结点有右子树，则其rchild域指示其右孩子，否则令rchild指示其后继。还需在结点结构中增加两个标志域LTag和RTag。LTag=0时，lchild域指示结点的左孩子，LTag=1时，lchild域指示结点的前驱；RTag=0时，rchild域指示结点的右孩子，RTag=1时，rchild域指示结点的后继。以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索链表，其中指向结点前驱和后继的指针叫做线索，加上线索的二叉树称为线索二叉树。对二叉树以某种次序遍历使其变为线索二叉树的过程叫做线索化。若对二叉树进行中序遍历，则所得的线索二叉树称为中序线索二叉树，线索链表称为为中序线索链表。线索二叉树是一种物理结构。 <a class=\"image\" href=\"/wiki/File:Tbt1.jpg\"><img width=\"415\" height=\"62\" alt=\"Tbt1.jpg\" src=\"//upload.wikimedia.org/wikipedia/commons/d/db/Tbt1.jpg\" data-file-height=\"62\" data-file-width=\"415\" /></a>","fragment_id":"树的二叉链表存储的基本操作_26","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"在中序线索树找结点后继的规律是：若其右标志为1，则右链为线索，指示其后继，否则遍历其右子树时访问的第一个结点（右子树最左下的结点）为其后继；找结点前驱的规律是：若其左标志为1，则左链为线索，指示其前驱，否则遍历左子树时最后访问的一个结点（左子树中最右下的结点）为其前驱。<br /> 在后序线索树中找到结点的后继分三种情况：","fragment_id":"树的二叉链表存储的基本操作_27","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li>若结点是二叉树的根，则其后继为空；</li> \n<li>若结点是其双亲的右孩子，或是其双亲的左孩子且其双亲没有右子树，则其后继即为双亲结点；</li> \n<li>若结点是其双亲的左孩子，且其双亲有右子树，则其后继为双亲右子树上按后序遍历列出的第一个结点。</li>","fragment_id":"树的二叉链表存储的基本操作_28","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"二叉線索存儲表示\"></span><span class=\"mw-headline\" id=\".E4.BA.8C.E5.8F.89.E7.B7.9A.E7.B4.A2.E5.AD.98.E5.84.B2.E8.A1.A8.E7.A4.BA\">二叉线索存储表示</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：二叉线索存储表示\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=22\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_29","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"存儲結構_3\"></span><span class=\"mw-headline\" id=\".E5.AD.98.E5.84.B2.E7.B5.90.E6.A7.8B_3\">存储结构</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：存储结构\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;section=23\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"树的二叉链表存储的基本操作_30","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"二叉树的二叉线索存储表示：在线索链表上添加一个头结点，并令其lchild域的指针指向二叉树的根结点，其rchild域的指针指向中序遍历时访问的最后一个结点。令二叉树中序序列中的第一个结点的lchild域指针和最后一个结点的rchild域的指针均指向头结点，这样就创建了一个双向线索链表。二叉树常采用二叉链表方式存储。","fragment_id":"树的二叉链表存储的基本操作_31","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"cm\">/* 二叉樹的二叉線索存儲表示 */</span>\n <span class=\"k\">typedef</span> <span class=\"k\">enum</span><span class=\"p\">{</span><span class=\"n\">Link</span><span class=\"p\">,</span><span class=\"n\">Thread</span><span class=\"p\">}</span><span class=\"n\">PointerTag</span><span class=\"p\">;</span> <span class=\"cm\">/* Link(0)：指針，Thread(1)：線索 */</span>\n <span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">BiThrNode</span>\n <span class=\"p\">{</span>\n   <span class=\"n\">TElemType</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n   <span class=\"k\">struct</span> <span class=\"n\">BiThrNode</span> <span class=\"o\">*</span><span class=\"n\">lchild</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">rchild</span><span class=\"p\">;</span> <span class=\"cm\">/* 左右孩子指針 */</span>\n   <span class=\"n\">PointerTag</span> <span class=\"n\">LTag</span><span class=\"p\">,</span><span class=\"n\">RTag</span><span class=\"p\">;</span> <span class=\"cm\">/* 左右標誌 */</span>\n <span class=\"p\">}</span><span class=\"n\">BiThrNode</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"n\">BiThrTree</span><span class=\"p\">;</span>\n</pre>","fragment_id":"树的二叉链表存储的基本操作_32","scratchTime":"2017-10-28 15:34:48.0","type":"leaf","flag":"fragment"}]}]}]}
{"totalbranchlevel":2,"branchnum":4,"term_id":43,"name":"朱迪矩阵","children":[{"totalbranchlevel":0,"facet_name":"摘要","totalbranchnum":0,"type":"branch","totalleafnum":2,"children":[{"url":"","content":"<b>Judy array</b>是一个计算机科学和软件工程学中的名词，是一种高性能、低内存消耗的数据结构，实现了<a title=\"关联数组\" href=\"/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84\">关联数组</a>的功能。与普通<a title=\"数组\" href=\"/wiki/%E6%95%B0%E7%BB%84\">数组</a>不同，Judy array可以是稀疏的，这一点更像是<a title=\"散列表\" class=\"mw-redirect\" href=\"/wiki/%E6%95%A3%E5%88%97%E8%A1%A8\">散列表</a>，而非数组。Judy array可以用整形或字符串作为键值来存储、查询数据，它最大的优势是可动态自动扩展，高性能，节省内存并且易于使用。","fragment_id":"摘要_1","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"},{"url":"","content":"由于Judy array在操作速度和内存使用上都非常高效，同时并不需要特殊配置或初始化，使得它可以用来替换掉多种常见数据结构，例如<a title=\"跳跃列表\" href=\"/wiki/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8\">跳跃列表</a>,<a title=\"链表\" href=\"/wiki/%E9%93%BE%E8%A1%A8\">链表</a>,<a title=\"二叉树\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91\">二叉树</a>,<a title=\"B树\" href=\"/wiki/B%E6%A0%91\">B树</a>,<a title=\"散列表\" class=\"mw-redirect\" href=\"/wiki/%E6%95%A3%E5%88%97%E8%A1%A8\">散列表</a>，而且judy array在海量数据集上的表现比那些数据结构更好。","fragment_id":"摘要_2","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"术语","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"<li><i>容量</i> 可以理解为Judy Array在不扩展内存使用的情况下所能维护的数据量，也可以是某个节点的，视乎上下文。</li> \n<li><i>用量</i> 已经存储的数据量，既可以描述整个Judy Array的数据量，也可以是某个节点下的。</li> \n<li><i>密度</i> 用来描述数据存储的密集程度， 密度 = 用量/容量</li>","fragment_id":"术语_1","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":1,"facet_name":"优势","totalbranchnum":2,"type":"branch","totalleafnum":2,"children":[{"totalbranchlevel":0,"facet_name":"内存分配","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"Judy array是没有容量限制的，所以也不用事先分配好存储空间，它可以根据用量动态决定生长或收缩内存使用，来支撑海量数据存储。其存储能力仅受到计算机内存容量的限制。<sup class=\"reference\" id=\"cite_ref-3\"><a href=\"#cite_note-3\">[3]</a></sup> Judy array的内存用量与其存储的数据用量基本呈线性关系。","fragment_id":"内存分配_1","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"速度","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"Judy array在设计上就力争保持尽可能高的<a title=\"CPU缓存\" href=\"/wiki/CPU%E7%BC%93%E5%AD%98\">CPU缓存</a>命中率，为了达到这个目标，其内部算法十分复杂。由于有了这些针对性的优化，使得Judy array在运行速度上十分高效，有时甚至超过<a title=\"散列表\" class=\"mw-redirect\" href=\"/wiki/%E6%95%A3%E5%88%97%E8%A1%A8\">散列表</a>，尤其是在处理大数据集的时候。由于Judy array是依托<a title=\"树 (数据结构)\" href=\"/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">树 (数据结构)</a>形结构设计的，其内存消耗比散列表小很多，同样是拜树形结构所赐，使得它可以完成键值的顺序遍历，这一点在散列表中是不可能的。","fragment_id":"速度_1","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"}]}]},{"totalbranchlevel":0,"facet_name":"算法","totalbranchnum":0,"type":"branch","totalleafnum":6,"children":[{"url":"","content":"从Judy array的发明者所撰写的简介以及其他一些相关的中文论文中看，设计中使用了多种的压缩思想与压缩算法，根据不同的密度情况，选择不同的压缩方式，以期尽可能节省内存，降低实际存储中的稀疏情况，我猜测，这能够在缓存命中率上带来不少提升，进而提升效率。","fragment_id":"算法_1","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li>对于密度很高，空洞很少的节点，使用位图（bitmap）来存储。</li> \n<li>对于密度很低的情况，只存储出现的键值</li> \n<li>对于密度极低的情况，使用类似于<a title=\"字典树\" class=\"mw-redirect\" href=\"/wiki/%E5%AD%97%E5%85%B8%E6%A0%91\">字典树</a>的结构，跨层压缩数据。</li>","fragment_id":"算法_2","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"参考文献\"></span><span class=\"mw-headline\" id=\".E5.8F.82.E8.80.83.E6.96.87.E7.8C.AE\">参考文献</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：参考文献\" href=\"/w/index.php?title=%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%99%A3&amp;action=edit&amp;section=6\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"算法_3","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"},{"url":"","content":"<ol class=\"references\"> \n <li id=\"cite_note-1\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-1\"><span class=\"cite-accessibility-label\">跳转 </span>^</a></b></span> <span class=\"reference-text\">Alan Silverstein, &quot;<a class=\"external text\" href=\"http://judy.sourceforge.net/application/shop_interm.pdf\" rel=\"nofollow\">Judy IV Shop Manual</a>&quot;, 2002</span></li> \n <li id=\"cite_note-2\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-2\"><span class=\"cite-accessibility-label\">跳转 </span>^</a></b></span> <span class=\"reference-text\"><a class=\"external free\" href=\"http://judy.sourceforge.net/\" rel=\"nofollow\">http://judy.sourceforge.net/</a></span></li> \n <li id=\"cite_note-3\"><span class=\"mw-cite-backlink\"><b><a href=\"#cite_ref-3\"><span class=\"cite-accessibility-label\">跳转 </span>^</a></b></span> <span class=\"reference-text\">Advances in databases: concepts, systems and applications&nbsp;: By Kotagiri Ramamohanarao</span></li> \n</ol>","fragment_id":"算法_4","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"外部链接\"></span><span class=\"mw-headline\" id=\".E5.A4.96.E9.83.A8.E9.93.BE.E6.8E.A5\">外部链接</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：外部链接\" href=\"/w/index.php?title=%E6%9C%B1%E8%BF%AA%E7%9F%A9%E9%99%A3&amp;action=edit&amp;section=7\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"算法_5","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li><a class=\"external text\" href=\"http://judy.sourceforge.net/\" rel=\"nofollow\">Main Judy arrays site</a></li> \n<li><a class=\"external text\" href=\"http://judy.sourceforge.net/downloads/10minutes.htm\" rel=\"nofollow\">How Judy arrays work and why they are so fast</a></li> \n<li><a class=\"external text\" href=\"http://judy.sourceforge.net/application/shop_interm.pdf\" rel=\"nofollow\">A complete technical description of Judy arrays</a></li> \n<li><a class=\"external text\" href=\"http://www.nothings.org/computer/judy/\" rel=\"nofollow\">An independent performance comparison of Judy to Hash Tables</a></li> \n<li><a class=\"external text\" href=\"http://code.google.com/p/judyarray\" rel=\"nofollow\">A compact implementation of Judy arrays in 1K lines of C code</a></li>","fragment_id":"算法_6","scratchTime":"2017-10-28 15:34:57.0","type":"leaf","flag":"fragment"}]}]}
{"totalbranchlevel":2,"branchnum":7,"term_id":70,"name":"链表","children":[{"totalbranchlevel":0,"facet_name":"摘要","totalbranchnum":0,"type":"branch","totalleafnum":5,"children":[{"url":"","content":"<tbody>\n <tr> \n  <td class=\"mbox-image\"> \n   <div style=\"width: 52px;\">\n    <a class=\"image\" href=\"/wiki/File:Tango-nosources.svg\"><img width=\"45\" height=\"45\" alt=\"Tango-nosources.svg\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Tango-nosources.svg/45px-Tango-nosources.svg.png\" data-file-height=\"48\" data-file-width=\"48\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Tango-nosources.svg/68px-Tango-nosources.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Tango-nosources.svg/90px-Tango-nosources.svg.png 2x\" /></a>\n   </div> </td> \n  <td class=\"mbox-text\"><span class=\"mbox-text-span\">本条目<b>没有列出任何<a title=\"Wikipedia:列明来源\" href=\"/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90\">参考或来源</a></b>。<small><i>（2011年11月8日）</i></small> <span class=\"hide-when-compact\"><br /> <small>维基百科所有的内容都应该<a title=\"Wikipedia:可供查证\" href=\"/wiki/Wikipedia:%E5%8F%AF%E4%BE%9B%E6%9F%A5%E8%AD%89\">可供查证</a>。请协助添加来自<a title=\"Wikipedia:可靠来源\" href=\"/wiki/Wikipedia:%E5%8F%AF%E9%9D%A0%E6%9D%A5%E6%BA%90\">可靠来源</a>的引用以<a class=\"external text\" href=\"//zh.wikipedia.org/w/index.php?title=%E9%93%BE%E8%A1%A8&amp;action=edit\">改善这篇条目</a>。<a title=\"Wikipedia:可供查证\" class=\"mw-redirect\" href=\"/wiki/Wikipedia:%E5%8F%AF%E4%BE%9B%E6%9F%A5%E8%AF%81\">无法查证</a>的内容可能被提出异议而移除。</small></span> </span></td> \n </tr> \n</tbody>","fragment_id":"摘要_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"noteTA-title\" data-noteta-code=\"zh-hans:链表; zh-hant:連結串列;\"></div> \n<div class=\"noteTA-group\"> \n <div data-noteta-group=\"IT\" data-noteta-group-source=\"module\"></div> \n</div> \n<div class=\"noteTA-local\"> \n <div data-noteta-code=\"zh-hans:链表; zh-hant:連結串列;\"></div> \n <div data-noteta-code=\"zh-hant:指標; zh-hans:指针;\"></div> \n</div>","fragment_id":"摘要_2","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<b>链表</b>（<span lang=\"en\" xml:lang=\"en\">Linked list</span>）是一种常见的基础数据结构，是一种<a title=\"线性表\" href=\"/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8\">线性表</a>，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的<a title=\"指针\" class=\"mw-disambig\" href=\"/wiki/%E6%8C%87%E9%92%88\">指针</a>(<span lang=\"en\" xml:lang=\"en\">Pointer</span>)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的<a title=\"复杂度\" class=\"mw-redirect\" href=\"/wiki/%E8%A4%87%E9%9B%9C%E5%BA%A6\">复杂度</a>，比另一种线性表<a title=\"顺序表\" href=\"/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8\">顺序表</a>快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。","fragment_id":"摘要_3","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（&quot;links&quot;）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。","fragment_id":"摘要_4","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"链表可以在多种编程语言中实现。像<a title=\"Lisp\" class=\"mw-redirect\" href=\"/wiki/Lisp\">Lisp</a>和<a title=\"Scheme\" href=\"/wiki/Scheme\">Scheme</a>这样的语言的内建数据类型中就包含了链表的访问和操作。程序语言或面向对象语言，如C/C++和Java依靠易变工具来生成链表。","fragment_id":"摘要_5","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"历史","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"链表开发于1955-56，由当时所属于<a title=\"兰德公司\" href=\"/wiki/%E5%85%B0%E5%BE%B7%E5%85%AC%E5%8F%B8\">兰德公司</a>（<span class=\"LangWithName\">英语：<span lang=\"en\" xml:lang=\"en\">RAND Corporation</span></span>）的艾伦纽维尔（Allen Newell），克里夫肖（Cliff Shaw）和赫伯特西蒙（Herbert Simon）在他们编写的<a title=\"信息处理语言\" class=\"mw-redirect\" href=\"/wiki/%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80\">信息处理语言</a>（IPL）中做为原始数据类型所编写。IPL被作者们用来开发几种早期的人工智能程序，包括逻辑推理机，通用问题解算器和一个计算机象棋程序。","fragment_id":"历史_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":1,"facet_name":"结构","totalbranchnum":2,"type":"branch","totalleafnum":2,"children":[{"totalbranchlevel":0,"facet_name":"单向链表","totalbranchnum":0,"type":"branch","totalleafnum":2,"children":[{"url":"","content":"<a class=\"image\" href=\"/wiki/File:Singly-linked-list.svg\"><img width=\"408\" height=\"41\" alt=\"Singly-linked-list.svg\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/408px-Singly-linked-list.svg.png\" data-file-height=\"41\" data-file-width=\"408\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/612px-Singly-linked-list.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Singly-linked-list.svg/816px-Singly-linked-list.svg.png 2x\" /></a>\n<br /> \n<small><i>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接</i></small>","fragment_id":"单向链表_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"链表最基本的结构是在每个节点保存数据和到下一个节点的地址，在最后一个节点保存一个特殊的结束标记，另外在一个固定的位置保存指向第一个节点的指针，有的时候也会同时储存指向最后一个节点的指针。一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。但是也可以提前把一个节点的位置另外保存起来，然后直接访问。当然如果只是访问数据就没必要了，不如在链表上储存指向实际数据的指针。这样一般是为了访问链表中的下一个或者前一个（需要储存反向的指针，见下面的双向链表）节点。","fragment_id":"单向链表_2","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"双向链表","totalbranchnum":0,"type":"branch","totalleafnum":5,"children":[{"url":"","content":"一种更复杂的链表是“双向链表”或“双面链表”。每个节点有两个连接：一个指向前一个节点，（当此“连接”为第一个“连接”时，指向空值或者空列表）；而另一个指向下一个节点，（当此“连接”为最后一个“连接”时，指向空值或者空列表）","fragment_id":"双向链表_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<a class=\"image\" href=\"/wiki/File:Doubly-linked-list.svg\"><img width=\"610\" height=\"41\" alt=\"Doubly-linked-list.svg\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Doubly-linked-list.svg/610px-Doubly-linked-list.svg.png\" data-file-height=\"41\" data-file-width=\"610\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Doubly-linked-list.svg/915px-Doubly-linked-list.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Doubly-linked-list.svg/1220px-Doubly-linked-list.svg.png 2x\" /></a>\n<br /> \n<small><i>一个双向链表有三个整数值: 数值, 向后的节点链接, 向前的节点链接</i></small>","fragment_id":"双向链表_2","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"在一些低级语言中, <a title=\"XOR linked list（页面不存在）\" class=\"new\" href=\"/w/index.php?title=XOR_linked_list&amp;action=edit&amp;redlink=1\">XOR-linking</a> 提供一种在双向链表中通过用一个词来表示两个链接（前后），我们通常不提倡这种做法。","fragment_id":"双向链表_3","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<b>双向链表</b>也叫<b>双链表</b>。<b>双向链表</b>中不仅有指向后一个节点的指针，还有指向前一个节点的指针。这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。一般是在需要大批量的另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。","fragment_id":"双向链表_4","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点。这时候就要修改指向首个节点的指针。有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点，形成一个下面说的循环链表。这个虚拟节点之后的节点就是真正的第一个节点。这种情况通常可以用这个虚拟节点直接表示这个链表，对于把链表单独的存在<a title=\"数组\" href=\"/wiki/%E6%95%B0%E7%BB%84\">数组</a>里的情况，也可以直接用这个数组表示链表并用第0个或者第-1个（如果编译器支持）节点固定的表示这个虚拟节点。","fragment_id":"双向链表_5","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]}]},{"totalbranchlevel":0,"facet_name":"链表的应用","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"节点的数据域也可以成为另一个链表。通过这种手段，我们可以用列表来构建许多链性数据结构；这个实例产生于Lisp编程语言，在Lisp中链表是初级数据结构，并且现在成为了常见的基础编程模式。 有时候，链表用来生成联合数组，在这种情况下我们称之为联合数列。这种情况下用链表会优于其它数据结构，如自平对分查找树（self-balancing binary search trees）甚至是一些小的数据集合。不管怎样，一些时候一个链表在这样一个树中创建一个节点子集，并且以此来更有效率地转换这个集合。","fragment_id":"链表的应用_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":1,"facet_name":"C代码实例","totalbranchnum":2,"type":"branch","totalleafnum":2,"children":[{"totalbranchlevel":0,"facet_name":"接口声明","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"<pre><span class=\"lineno\"> 1 </span><span class=\"cp\">#ifndef LLIST_H</span>\n<span class=\"lineno\"> 2 </span><span class=\"cp\">#define LLIST_H</span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span><span class=\"k\">typedef</span> <span class=\"kt\">void</span> <span class=\"nf\">node_proc_fun_t</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"lineno\"> 5 </span><span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"nf\">node_comp_fun_t</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"p\">);</span>\n<span class=\"lineno\"> 6 </span>\n<span class=\"lineno\"> 7 </span><span class=\"k\">typedef</span> <span class=\"kt\">void</span> <span class=\"n\">LLIST_T</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 8 </span>\n<span class=\"lineno\"> 9 </span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"nf\">llist_new</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">elmsize</span><span class=\"p\">);</span>\n<span class=\"lineno\">10 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_delete</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n<span class=\"lineno\">11 </span> \n<span class=\"lineno\">12 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_node_append</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">datap</span><span class=\"p\">);</span>\n<span class=\"lineno\">13 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_node_prepend</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">datap</span><span class=\"p\">);</span>\n<span class=\"lineno\">14 </span>\n<span class=\"lineno\">15 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_travel</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">node_proc_fun_t</span> <span class=\"o\">*</span><span class=\"n\">proc</span><span class=\"p\">);</span>\n<span class=\"lineno\">16 </span> \n<span class=\"lineno\">17 </span><span class=\"kt\">void</span> <span class=\"nf\">llist_node_delete</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">node_comp_fun_t</span> <span class=\"o\">*</span><span class=\"n\">comp</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">key</span><span class=\"p\">);</span> \n<span class=\"lineno\">18 </span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">llist_node_find</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">node_comp_fun_t</span> <span class=\"o\">*</span><span class=\"n\">comp</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"lineno\">19 </span>\n<span class=\"lineno\">20 </span><span class=\"cp\">#endif</span>\n</pre>","fragment_id":"接口声明_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"接口实现","totalbranchnum":0,"type":"branch","totalleafnum":4,"children":[{"url":"","content":"<pre><span class=\"lineno\"> 1 </span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span>\n<span class=\"lineno\"> 2 </span><span class=\"nf\">llist_new</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">elmsize</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 3 </span>    <span class=\"k\">struct</span> <span class=\"n\">llist_st</span> <span class=\"o\">*</span><span class=\"n\">newlist</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 4 </span>    <span class=\"n\">newlist</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">llist_st</span><span class=\"p\">));</span>\n<span class=\"lineno\"> 5 </span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">newlist</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n<span class=\"lineno\"> 6 </span>        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 7 </span>    <span class=\"n\">newlist</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">datap</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 8 </span>    <span class=\"n\">newlist</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">newlist</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 9 </span>    <span class=\"n\">newlist</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">newlist</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">;</span>\n<span class=\"lineno\">10 </span>    <span class=\"n\">newlist</span><span class=\"o\">-&gt;</span><span class=\"n\">elmsize</span> <span class=\"o\">=</span> <span class=\"n\">elmsize</span><span class=\"p\">;</span>\n<span class=\"lineno\">11 </span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">newlist</span><span class=\"p\">;</span>\n<span class=\"lineno\">12 </span><span class=\"p\">}</span>\n<span class=\"lineno\">13 </span>\n<span class=\"lineno\">14 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_delete</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">15 </span>    <span class=\"k\">struct</span> <span class=\"n\">llist_st</span> <span class=\"o\">*</span><span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"lineno\">16 </span>    <span class=\"k\">struct</span> <span class=\"n\">node_st</span> <span class=\"o\">*</span><span class=\"n\">curr</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">save</span><span class=\"p\">;</span>\n<span class=\"lineno\">17 </span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span> <span class=\"p\">;</span>\n<span class=\"lineno\">18 </span>            <span class=\"n\">curr</span> <span class=\"o\">!=</span> <span class=\"o\">&amp;</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span> <span class=\"p\">;</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">save</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">19 </span>        <span class=\"n\">save</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\">20 </span>        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">);</span>\n<span class=\"lineno\">21 </span>        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">);</span>\n<span class=\"lineno\">22 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">23 </span>    <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">);</span>\n<span class=\"lineno\">24 </span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"lineno\">25 </span><span class=\"p\">}</span>\n</pre>","fragment_id":"初始化和销毁_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"lineno\"> 1 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_node_append</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">datap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"k\">struct</span> <span class=\"n\">llist_st</span> <span class=\"o\">*</span><span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 3 </span>    <span class=\"k\">struct</span> <span class=\"n\">node_st</span> <span class=\"o\">*</span><span class=\"n\">newnodep</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 4 </span>    <span class=\"n\">newnodep</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node_st</span><span class=\"p\">));</span>\n<span class=\"lineno\"> 5 </span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">newnodep</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n<span class=\"lineno\"> 6 </span>        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 7 </span>    <span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">elmsize</span><span class=\"p\">);</span>\n<span class=\"lineno\"> 8 </span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 9 </span>        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">newnodep</span><span class=\"p\">);</span>\n<span class=\"lineno\">10 </span>        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"lineno\">11 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">12 </span>    <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">,</span> <span class=\"n\">datap</span><span class=\"p\">,</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">elmsize</span><span class=\"p\">);</span>\n<span class=\"lineno\">13 </span>    <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">newnodep</span><span class=\"p\">;</span>\n<span class=\"lineno\">14 </span>    <span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">prev</span><span class=\"p\">;</span>\n<span class=\"lineno\">15 </span>    <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">newnodep</span><span class=\"p\">;</span>\n<span class=\"lineno\">16 </span>    <span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">;</span>\n<span class=\"lineno\">17 </span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"lineno\">18 </span><span class=\"p\">}</span>\n<span class=\"lineno\">19 </span>\n<span class=\"lineno\">20 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_node_prepend</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">datap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">21 </span>    <span class=\"k\">struct</span> <span class=\"n\">llist_st</span> <span class=\"o\">*</span><span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"lineno\">22 </span>    <span class=\"k\">struct</span> <span class=\"n\">node_st</span> <span class=\"o\">*</span><span class=\"n\">newnodep</span><span class=\"p\">;</span>\n<span class=\"lineno\">23 </span>    <span class=\"n\">newnodep</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node_st</span><span class=\"p\">));</span>\n<span class=\"lineno\">24 </span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">newnodep</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n<span class=\"lineno\">25 </span>        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"lineno\">26 </span>    <span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">elmsize</span><span class=\"p\">);</span>\n<span class=\"lineno\">27 </span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">28 </span>        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">newnodep</span><span class=\"p\">);</span>\n<span class=\"lineno\">29 </span>        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"lineno\">30 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">31 </span>    <span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">,</span> <span class=\"n\">datap</span><span class=\"p\">,</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">elmsize</span><span class=\"p\">);</span>\n<span class=\"lineno\">32 </span>    <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">newnodep</span><span class=\"p\">;</span>\n<span class=\"lineno\">33 </span>    <span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\">34 </span>    <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">newnodep</span><span class=\"p\">;</span>\n<span class=\"lineno\">35 </span>    <span class=\"n\">newnodep</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">;</span>\n<span class=\"lineno\">36 </span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"lineno\">37 </span><span class=\"p\">}</span>\n</pre>","fragment_id":"节点插入_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"lineno\">1 </span><span class=\"kt\">int</span> <span class=\"nf\">llist_travel</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">node_proc_fun_t</span> <span class=\"o\">*</span><span class=\"n\">proc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">2 </span>    <span class=\"k\">struct</span> <span class=\"n\">llist_st</span> <span class=\"o\">*</span><span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"lineno\">3 </span>    <span class=\"k\">struct</span> <span class=\"n\">node_st</span> <span class=\"o\">*</span><span class=\"n\">curr</span><span class=\"p\">;</span>\n<span class=\"lineno\">4 </span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\">5 </span>            <span class=\"n\">curr</span> <span class=\"o\">!=</span> <span class=\"o\">&amp;</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span> <span class=\"p\">;</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span>\n<span class=\"lineno\">6 </span>        <span class=\"n\">proc</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">);</span> <span class=\"c1\">// proc(something you like)</span>\n<span class=\"lineno\">7 </span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"lineno\">8 </span><span class=\"p\">}</span>\n</pre>","fragment_id":"遍历_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"lineno\"> 1 </span><span class=\"kt\">void</span> <span class=\"nf\">llist_node_delete</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span>\n<span class=\"lineno\"> 2 </span>                       <span class=\"n\">node_comp_fun_t</span> <span class=\"o\">*</span><span class=\"n\">comp</span><span class=\"p\">,</span>\n<span class=\"lineno\"> 3 </span>                       <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 4 </span>    <span class=\"k\">struct</span> <span class=\"n\">llist_st</span> <span class=\"o\">*</span><span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 5 </span>    <span class=\"k\">struct</span> <span class=\"n\">node_st</span> <span class=\"o\">*</span><span class=\"n\">curr</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 6 </span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 7 </span>            <span class=\"n\">curr</span> <span class=\"o\">!=</span> <span class=\"o\">&amp;</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">;</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 8 </span>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">comp</span><span class=\"p\">)(</span><span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 9 </span>            <span class=\"k\">struct</span> <span class=\"n\">node_st</span> <span class=\"o\">*</span><span class=\"n\">_next</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">_prev</span><span class=\"p\">;</span>\n<span class=\"lineno\">10 </span>            <span class=\"n\">_prev</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"p\">,</span> <span class=\"n\">_next</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\">11 </span>            <span class=\"n\">_prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">_next</span><span class=\"p\">,</span> <span class=\"n\">_next</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">_prev</span><span class=\"p\">;</span>\n<span class=\"lineno\">12 </span>            <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">);</span>\n<span class=\"lineno\">13 </span>            <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">);</span>\n<span class=\"lineno\">14 </span>            <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"lineno\">15 </span>        <span class=\"p\">}</span>\n<span class=\"lineno\">16 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">17 </span>    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"lineno\">18 </span><span class=\"p\">}</span>\n<span class=\"lineno\">19 </span>\n<span class=\"lineno\">20 </span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">llist_node_find</span><span class=\"p\">(</span><span class=\"n\">LLIST_T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span>\n<span class=\"lineno\">21 </span>                      <span class=\"n\">node_comp_fun_t</span> <span class=\"o\">*</span><span class=\"n\">comp</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">22 </span>    <span class=\"k\">struct</span> <span class=\"n\">llist_st</span> <span class=\"o\">*</span><span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"lineno\">23 </span>    <span class=\"k\">struct</span> <span class=\"n\">node_st</span> <span class=\"o\">*</span><span class=\"n\">curr</span><span class=\"p\">;</span>\n<span class=\"lineno\">24 </span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\">25 </span>            <span class=\"n\">curr</span> <span class=\"o\">!=</span> <span class=\"o\">&amp;</span><span class=\"n\">me</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">;</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">26 </span>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">comp</span><span class=\"p\">)(</span><span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">)</span>\n<span class=\"lineno\">27 </span>            <span class=\"k\">return</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">datap</span><span class=\"p\">;</span>\n<span class=\"lineno\">28 </span>    <span class=\"p\">}</span>\n<span class=\"lineno\">29 </span>    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"lineno\">30 </span><span class=\"p\">}</span>\n</pre>","fragment_id":"删除和查找_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]}]},{"totalbranchlevel":0,"facet_name":"C宏实例","totalbranchnum":0,"type":"branch","totalleafnum":2,"children":[{"url":"","content":"以下代码摘自<a title=\"Linux\" href=\"/wiki/Linux\">Linux</a><a title=\"内核\" href=\"/wiki/%E5%86%85%E6%A0%B8\">内核</a>2.6.21.5源码(部分)，展示了链表的另一种实现思路，未采用ANSI C标准，采用GNU C标准，遵从GPL版权许可。","fragment_id":"C宏实例_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"lineno\"> 1 </span><span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 2 </span>    <span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">prev</span><span class=\"p\">;</span>\n<span class=\"lineno\"> 3 </span><span class=\"p\">};</span>\n<span class=\"lineno\"> 4 </span>\n<span class=\"lineno\"> 5 </span><span class=\"cp\">#define LIST_HEAD_INIT(name) { &amp;(name), &amp;(name) }</span>\n<span class=\"lineno\"> 6 </span><span class=\"cp\">#define LIST_HEAD(name) \\</span>\n<span class=\"lineno\"> 7 </span><span class=\"cp\">        struct list_head name = LIST_HEAD_INIT(name)</span>\n<span class=\"lineno\"> 8 </span>\n<span class=\"lineno\"> 9 </span><span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">INIT_LIST_HEAD</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">list</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">10 </span>    <span class=\"n\">list</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"p\">;</span>\n<span class=\"lineno\">11 </span>    <span class=\"n\">list</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"p\">;</span>\n<span class=\"lineno\">12 </span><span class=\"p\">}</span>\n<span class=\"lineno\">13 </span>\n<span class=\"lineno\">14 </span><span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">__list_add</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">new</span><span class=\"p\">,</span>\n<span class=\"lineno\">15 </span>                              <span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">prev</span><span class=\"p\">,</span>\n<span class=\"lineno\">16 </span>                              <span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">17 </span>    <span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">;</span>\n<span class=\"lineno\">18 </span>    <span class=\"n\">new</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\">19 </span>    <span class=\"n\">new</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"p\">;</span>\n<span class=\"lineno\">20 </span>    <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">new</span><span class=\"p\">;</span>\n<span class=\"lineno\">21 </span><span class=\"p\">}</span>\n<span class=\"lineno\">22 </span>\n<span class=\"lineno\">23 </span><span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">list_add</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">new</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">24 </span>    <span class=\"n\">__list_add</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">);</span>\n<span class=\"lineno\">25 </span><span class=\"p\">}</span>\n<span class=\"lineno\">26 </span>\n<span class=\"lineno\">27 </span><span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">__list_del</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">prev</span><span class=\"p\">,</span> <span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">28 </span>    <span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"p\">;</span>\n<span class=\"lineno\">29 </span>    <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"lineno\">30 </span><span class=\"p\">}</span>\n<span class=\"lineno\">31 </span>\n<span class=\"lineno\">32 </span>\n<span class=\"lineno\">33 </span><span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"kt\">void</span> <span class=\"nf\">list_del</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">list_head</span> <span class=\"o\">*</span><span class=\"n\">entry</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\">34 </span>    <span class=\"n\">__list_del</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">);</span>\n<span class=\"lineno\">35 </span>    <span class=\"n\">entry</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"lineno\">36 </span>    <span class=\"n\">entry</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"lineno\">37 </span><span class=\"p\">}</span>\n<span class=\"lineno\">38 </span>\n<span class=\"lineno\">39 </span><span class=\"cp\">#define __list_for_each(pos, head) \\</span>\n<span class=\"lineno\">40 </span><span class=\"cp\">        for (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)</span>\n<span class=\"lineno\">41 </span>\n<span class=\"lineno\">42 </span><span class=\"cp\">#define list_for_each_entry(pos, head, member)                          \\</span>\n<span class=\"lineno\">43 </span><span class=\"cp\">        for (pos = list_entry((head)-&gt;next, typeof(*pos), member);      \\</span>\n<span class=\"lineno\">44 </span><span class=\"cp\">             prefetch(pos-&gt;member.next), &amp;pos-&gt;member != (head);        \\</span>\n<span class=\"lineno\">45 </span><span class=\"cp\">             pos = list_entry(pos-&gt;member.next, typeof(*pos), member))</span>\n</pre>","fragment_id":"C宏实例_2","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"常见用途","totalbranchnum":0,"type":"branch","totalleafnum":5,"children":[{"url":"","content":"<span id=\"参见\"></span><span class=\"mw-headline\" id=\".E5.8F.82.E8.A7.81\">参见</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：参见\" href=\"/w/index.php?title=%E9%93%BE%E8%A1%A8&amp;action=edit&amp;section=20\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"常见用途_1","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"其他数据结构\"></span><span class=\"mw-headline\" id=\".E5.85.B6.E4.BB.96.E6.95.B0.E6.8D.AE.E7.BB.93.E6.9E.84\">其他数据结构</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：其他数据结构\" href=\"/w/index.php?title=%E9%93%BE%E8%A1%A8&amp;action=edit&amp;section=21\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"常见用途_2","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li><a title=\"线性表\" href=\"/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8\">线性表</a></li> \n<li><a title=\"顺序表\" href=\"/wiki/%E9%A1%BA%E5%BA%8F%E8%A1%A8\">顺序表</a></li> \n<li><a title=\"基本数据结构（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;action=edit&amp;redlink=1\">基本数据结构</a></li> \n<li><a title=\"树 (数据结构)\" class=\"mw-redirect\" href=\"/wiki/%E6%A8%B9_(%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B)\">树 (数据结构)</a></li>","fragment_id":"常见用途_3","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td style=\"padding: 2px;\"> \n   <table class=\"nowraplinks hlist collapsible autocollapse navbox-inner\" id=\"collapsibleTable0\" style=\"background: none; color: inherit; border-spacing: 0;\" cellspacing=\"0\"> \n    <tbody>\n     <tr> \n      <th class=\"navbox-title\" colspan=\"2\" scope=\"col\"><span class=\"collapseButton\">[<a id=\"collapseButton0\" href=\"#\">隐藏</a>]</span> \n       <div class=\"plainlinks hlist navbar mini\"> \n        <ul> \n         <li class=\"nv-view\"><a title=\"Template:Data structures\" href=\"/wiki/Template:Data_structures\"><abbr title=\"查看该模板\" style=\"background: none; border: currentColor; border-image: none;\">查</abbr></a></li> \n         <li class=\"nv-talk\"><a title=\"Template talk:Data structures\" href=\"/wiki/Template_talk:Data_structures\"><abbr title=\"讨论该模板\" style=\"background: none; border: currentColor; border-image: none;\">论</abbr></a></li> \n         <li class=\"nv-edit\"><a class=\"external text\" href=\"//zh.wikipedia.org/w/index.php?title=Template:Data_structures&amp;action=edit\"><abbr title=\"编辑该模板\" style=\"background: none; border: currentColor; border-image: none;\">编</abbr></a></li> \n        </ul> \n       </div> \n       <div style=\"font-size: 110%;\">\n        <a title=\"数据结构\" href=\"/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">数据结构</a>\n       </div> </th> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\">类型</th> \n      <td class=\"navbox-list navbox-odd\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"集合 (计算机科学)\" href=\"/wiki/%E9%9B%86%E5%90%88_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\">集合</a></li> \n         <li><a title=\"容器 (数据结构)\" class=\"mw-redirect\" href=\"/wiki/%E5%AE%B9%E5%99%A8_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">容器</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"抽象数据类型\" class=\"mw-redirect\" href=\"/wiki/%E6%8A%BD%E8%B1%A1%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B\">抽象类型</a></th> \n      <td class=\"navbox-list navbox-even\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"关联数组\" href=\"/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84\">关联数组</a> \n          <ul> \n           <li><a title=\"多重关连数组\" href=\"/wiki/%E5%A4%9A%E9%87%8D%E9%97%9C%E9%80%A3%E6%95%B8%E7%B5%84\">多重关连数组</a></li> \n          </ul> </li> \n         <li><a title=\"串列 (抽象数据类型)\" href=\"/wiki/%E4%B8%B2%E5%88%97_(%E6%8A%BD%E8%B1%A1%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5)\">列表</a></li> \n         <li><a title=\"堆栈\" href=\"/wiki/%E5%A0%86%E6%A0%88\">堆栈</a></li> \n         <li><a title=\"队列\" href=\"/wiki/%E9%98%9F%E5%88%97\">队列</a> \n          <ul> \n           <li><a title=\"双端队列\" href=\"/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97\">双端队列</a></li> \n          </ul> </li> \n         <li><a title=\"优先队列\" class=\"mw-redirect\" href=\"/wiki/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97\">优先队列</a> \n          <ul> \n           <li><a title=\"双端优先队列（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%8F%8C%E7%AB%AF%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97&amp;action=edit&amp;redlink=1\">双端优先队列</a></li> \n          </ul> </li> \n         <li><a title=\"集合 (计算机科学)\" href=\"/wiki/%E9%9B%86%E5%90%88_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\">集合</a> \n          <ul> \n           <li><a title=\"集合 (计算机科学)\" href=\"/wiki/%E9%9B%86%E5%90%88_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)#.E5.A4.9A.E9.87.8D.E9.9B.86\">多重集</a></li> \n           <li><a title=\"并查集\" href=\"/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86\">并查集</a></li> \n          </ul> </li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"数组\" href=\"/wiki/%E6%95%B0%E7%BB%84\">数组</a></th> \n      <td class=\"navbox-list navbox-odd\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"字符串\" class=\"mw-redirect\" href=\"/wiki/%E5%AD%97%E4%B8%B2\">字符串</a></li> \n         <li><a title=\"位数组（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E4%BD%8D%E6%95%B0%E7%BB%84&amp;action=edit&amp;redlink=1\">位数组</a></li> \n         <li><a title=\"环形缓冲器\" href=\"/wiki/%E7%92%B0%E5%BD%A2%E7%B7%A9%E8%A1%9D%E5%8D%80\">环形缓冲器</a></li> \n         <li><a title=\"动态数组（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84&amp;action=edit&amp;redlink=1\">动态数组</a></li> \n         <li><a title=\"哈希表\" href=\"/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8\">哈希表</a></li> \n         <li><a title=\"哈希数组树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%93%88%E5%B8%8C%E6%95%B0%E7%BB%84%E6%A0%91&amp;action=edit&amp;redlink=1\">哈希数组树</a></li> \n         <li><a title=\"稀疏数组（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84&amp;action=edit&amp;redlink=1\">稀疏数组</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"列表 (计算机科学)\" class=\"mw-redirect\" href=\"/wiki/%E5%88%97%E8%A1%A8_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\">列表</a></th> \n      <td class=\"navbox-list navbox-even\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"双端队列\" href=\"/wiki/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97\">双端队列</a></li> \n         <li><a title=\"队列\" href=\"/wiki/%E9%98%9F%E5%88%97\">队列</a></li> \n         <li><a title=\"堆栈\" href=\"/wiki/%E5%A0%86%E6%A0%88\">堆栈</a></li> \n         <li><a title=\"循环队列\" class=\"mw-redirect\" href=\"/wiki/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97\">循环队列</a></li> \n         <li><a title=\"关联表（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%85%B3%E8%81%94%E8%A1%A8&amp;action=edit&amp;redlink=1\">关联表</a></li> \n         <li><a class=\"mw-selflink selflink\">链表</a></li> \n         <li><a title=\"跳跃列表\" href=\"/wiki/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8\">跳跃列表</a></li> \n         <li><a title=\"松散链表（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E6%9D%BE%E6%95%A3%E9%93%BE%E8%A1%A8&amp;action=edit&amp;redlink=1\">松散链表</a></li> \n         <li><a title=\"异或链表\" href=\"/wiki/%E5%BC%82%E6%88%96%E9%93%BE%E8%A1%A8\">异或链表</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"树 (数据结构)\" href=\"/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">树</a></th> \n      <td class=\"navbox-list navbox-odd\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"线段树\" class=\"mw-redirect\" href=\"/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91\">线段树</a></li> \n         <li><a title=\"自平衡二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\">自平衡二叉查找树</a></li> \n         <li><a title=\"B树\" href=\"/wiki/B%E6%A0%91\">B树</a></li> \n         <li><a title=\"二叉查找树\" href=\"/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9\">二叉树</a> \n          <ul> \n           <li><a title=\"AA树\" href=\"/wiki/AA%E6%A0%91\">AA树</a></li> \n           <li><a title=\"AVL树\" href=\"/wiki/AVL%E6%A0%91\">AVL树</a></li> \n           <li><a title=\"红黑树\" href=\"/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91\">红黑树</a></li> \n           <li><a title=\"平衡树\" href=\"/wiki/%E5%B9%B3%E8%A1%A1%E6%A0%91\">平衡树</a></li> \n           <li><a title=\"伸展树\" href=\"/wiki/%E4%BC%B8%E5%B1%95%E6%A0%91\">伸展树</a></li> \n           <li><a title=\"二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\">二叉查找树</a></li> \n          </ul> </li> \n         <li><a title=\"堆 (数据结构)\" href=\"/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">堆</a> \n          <ul> \n           <li><a title=\"二叉堆\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86\">二叉堆</a></li> \n           <li><a title=\"左偏树\" href=\"/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91\">左偏树</a></li> \n           <li><a title=\"二项堆\" href=\"/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86\">二项堆</a></li> \n           <li><a title=\"斐波那契堆\" href=\"/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86\">斐波那契堆</a></li> \n          </ul> </li> \n         <li><a title=\"R树\" href=\"/wiki/R%E6%A0%91\">R树</a> \n          <ul> \n           <li><a title=\"R*树\" href=\"/wiki/R*%E6%A0%91\">R*树</a></li> \n           <li><a title=\"R+树\" href=\"/wiki/R%2B%E6%A0%91\">R+树</a></li> \n           <li><a title=\"Hilbert R树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Hilbert_R%E6%A0%91&amp;action=edit&amp;redlink=1\">Hilbert R树</a></li> \n          </ul> </li> \n         <li><a title=\"Trie\" href=\"/wiki/Trie\">前缀树</a> \n          <ul> \n           <li><a title=\"哈希树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%93%88%E5%B8%8C%E6%A0%91&amp;action=edit&amp;redlink=1\">哈希树</a></li> \n          </ul> </li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"图 (数据结构)\" class=\"mw-redirect\" href=\"/wiki/%E5%9B%BE_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">图</a></th> \n      <td class=\"navbox-list navbox-even\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"有向图\" class=\"mw-redirect\" href=\"/wiki/%E6%9C%89%E5%90%91%E5%9B%BE\">有向图</a></li> \n         <li><a title=\"有向无环图\" href=\"/wiki/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE\">有向无环图</a></li> \n         <li><a title=\"二元决策图\" href=\"/wiki/%E4%BA%8C%E5%85%83%E5%86%B3%E7%AD%96%E5%9B%BE\">二元决策图</a></li> \n         <li><a title=\"无向图\" class=\"mw-redirect\" href=\"/wiki/%E7%84%A1%E5%90%91%E5%9C%96\">无向图</a></li> \n         <li><a title=\"确定性非循环有限自动机（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E7%A1%AE%E5%AE%9A%E6%80%A7%E9%9D%9E%E5%BE%AA%E7%8E%AF%E6%9C%89%E9%99%90%E8%87%AA%E5%8A%A8%E6%9C%BA&amp;action=edit&amp;redlink=1\">确定性非循环有限自动机</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <td class=\"navbox-abovebelow\" colspan=\"2\"> \n       <div>\n        <a title=\"数据结构列表\" href=\"/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%97%E8%A1%A8\">数据结构列表</a>\n       </div> </td> \n     </tr> \n    </tbody>\n   </table> </td> \n </tr> \n</tbody>","fragment_id":"常见用途_4","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td style=\"padding: 2px;\"> \n   <table class=\"nowraplinks hlist navbox-inner\" style=\"background: none; color: inherit; border-spacing: 0;\" cellspacing=\"0\"> \n    <tbody>\n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"权威控制\" href=\"/wiki/%E6%AC%8A%E5%A8%81%E6%8E%A7%E5%88%B6\">规范控制</a></th> \n      <td class=\"navbox-list navbox-odd\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"集成规范文档\" href=\"/wiki/%E6%95%B4%E5%90%88%E8%A7%84%E8%8C%83%E6%96%87%E6%A1%A3\">GND</a>: <span class=\"uid\"><a class=\"external text\" href=\"http://d-nb.info/gnd/4783888-7\" rel=\"nofollow\">4783888-7</a></span></li> \n        </ul> \n       </div> </td> \n     </tr> \n    </tbody>\n   </table> </td> \n </tr> \n</tbody>","fragment_id":"常见用途_5","scratchTime":"2017-10-28 15:38:44.0","type":"leaf","flag":"fragment"}]}]}
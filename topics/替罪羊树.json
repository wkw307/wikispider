{"totalbranchlevel":2,"branchnum":1,"term_id":36,"name":"替罪羊树","children":[{"totalbranchlevel":0,"facet_name":"摘要","totalbranchnum":0,"type":"branch","totalleafnum":2,"children":[{"url":"","content":"替罪羊树是<a title=\"计算机科学\" class=\"mw-redirect\" href=\"/wiki/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\">计算机科学</a>中，一种基于部分重建的<a title=\"自平衡二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\">自平衡二叉搜索树</a>。在替罪羊树上，插入或删除节点的<a title=\"平摊分析\" href=\"/wiki/%E5%B9%B3%E6%91%8A%E5%88%86%E6%9E%90\">平摊</a>最坏<a title=\"时间复杂度\" href=\"/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">时间复杂度</a>是<a title=\"大O符号\" href=\"/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\">O</a>(log n)，搜索节点的最坏时间复杂度是O(log n)。","fragment_id":"摘要_1","scratchTime":"2017-10-28 15:33:53.0","type":"leaf","flag":"fragment"},{"url":"","content":"在非平衡的<a title=\"二叉搜索树\" class=\"mw-redirect\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91\">二叉搜索树</a>中，每次操作以后检查操作路径，找到最高的满足max(size(son_L),size(son_R))&gt;alpha*size(this)的结点，重建整个子树。<br /> 这样就得到了替罪羊树，而被重建的子树的原来的根就被称为替罪羊节点。<br /> 常数alpha一般选择为0.7左右。<br /> 通过势能分析，至少对于只有插入操作的替罪羊树，单操作均摊复杂度为O(log n)。<br /> 删除操作可以通过设置“删除”标记完成，复杂度即为查找复杂度O(log n)。<br />","fragment_id":"摘要_2","scratchTime":"2017-10-28 15:33:53.0","type":"leaf","flag":"fragment"}]}]}
{"totalbranchlevel":2,"branchnum":6,"term_id":31,"name":"红黑树","children":[{"totalbranchlevel":0,"facet_name":"摘要","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"<b>红黑树</b>（<span class=\"LangWithName\">英语：<span lang=\"en\" xml:lang=\"en\">Red–black tree</span></span>）是一种<a title=\"自平衡二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\">自平衡二叉查找树</a>，是在<a title=\"计算机科学\" href=\"/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6\">计算机科学</a>中用到的一种<a title=\"数据结构\" href=\"/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\">数据结构</a>，典型的用途是实现<a title=\"关联数组\" href=\"/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84\">关联数组</a>。它是在1972年由<a title=\"鲁道夫&middot;贝尔\" class=\"mw-redirect\" href=\"/wiki/%E9%B2%81%E9%81%93%E5%A4%AB%C2%B7%E8%B4%9D%E5%B0%94\">鲁道夫&middot;贝尔</a>发明的，他称之为&quot;<b>对称二叉B树</b>&quot;，它现代的名字是在Leo J. Guibas和<a title=\"Robert Sedgewick\" class=\"mw-redirect\" href=\"/wiki/Robert_Sedgewick\">Robert Sedgewick</a>于<a title=\"1978年\" href=\"/wiki/1978%E5%B9%B4\">1978年</a>写的一篇论文中获得的。它是复杂的，但它的操作有着良好的最坏情况<a title=\"算法分析\" href=\"/wiki/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\">运行时间</a>，并且在实践中是高效的：它可以在<a title=\"大O符号\" href=\"/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7\"><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n   <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n    <semantics> \n     <mrow class=\"MJX-TeXAtom-ORD\"> \n      <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mtext>\n         O\n        </mtext> \n       </mrow> \n       <mo stretchy=\"false\">\n        (\n       </mo> \n       <mi>\n        log\n       </mi> \n       <mo>\n        ⁡\n        <!-- ⁡ -->\n       </mo> \n       <mi>\n        n\n       </mi> \n       <mo stretchy=\"false\">\n        )\n       </mo> \n      </mstyle> \n     </mrow> \n     <annotation encoding=\"application/x-tex\">\n      {\\displaystyle {\\text{O}}(\\log n)}\n     </annotation> \n    </semantics> \n   </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.44ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle {\\text{O}}(\\log n)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/67697a0b44080bbf967c00d60bf4aac79f9ce385\" /></span></a>时间内做查找，插入和删除，这里的<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       n\n      </mi> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle n}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.4ex; height: 1.67ex; vertical-align: -0.33ex;\" alt=\"n\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b\" /></span>是树中元素的数目。","fragment_id":"摘要_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"用途和好处","totalbranchnum":0,"type":"branch","totalleafnum":3,"children":[{"url":"","content":"红黑树和<a title=\"AVL树\" href=\"/wiki/AVL%E6%A0%91\">AVL树</a>一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。这不只是使它们在时间敏感的应用如<a title=\"即时计算（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%8D%B3%E6%97%B6%E8%AE%A1%E7%AE%97&amp;action=edit&amp;redlink=1\">实时应用</a>（real time application）中有价值，而且使它们有在提供最坏情况担保的其他数据结构中作为建造板块的价值；例如，在<a title=\"计算几何\" href=\"/wiki/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95\">计算几何</a>中使用的很多数据结构都可以基于红黑树。","fragment_id":"用途和好处_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"红黑树在<a title=\"函数式编程\" class=\"mw-redirect\" href=\"/wiki/%E5%87%BD%E6%95%B8%E5%BC%8F%E7%B7%A8%E7%A8%8B\">函数式编程</a>中也特别有用，在这里它们是最常用的<a title=\"持久数据结构（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E6%8C%81%E4%B9%85%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;action=edit&amp;redlink=1\">持久数据结构</a>（persistent data structure）之一，它们用来构造<a title=\"关联数组\" href=\"/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84\">关联数组</a>和<a title=\"集合 (计算机科学)\" href=\"/wiki/%E9%9B%86%E5%90%88_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\">集合</a>，每次插入、删除之后它们能保持为以前的版本。除了<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mtext>\n        O\n       </mtext> \n      </mrow> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       log\n      </mi> \n      <mo>\n       ⁡\n       <!-- ⁡ -->\n      </mo> \n      <mi>\n       n\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle {\\text{O}}(\\log n)}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.44ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle {\\text{O}}(\\log n)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/67697a0b44080bbf967c00d60bf4aac79f9ce385\" /></span>的时间之外，红黑树的持久版本对每次插入或删除需要<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mtext>\n        O\n       </mtext> \n      </mrow> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       log\n      </mi> \n      <mo>\n       ⁡\n       <!-- ⁡ -->\n      </mo> \n      <mi>\n       n\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle {\\text{O}}(\\log n)}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.44ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle {\\text{O}}(\\log n)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/67697a0b44080bbf967c00d60bf4aac79f9ce385\" /></span>的空间。","fragment_id":"用途和好处_2","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"红黑树是<a title=\"2-3-4树\" href=\"/wiki/2-3-4%E6%A0%91\">2-3-4树</a>的一种等同。换句话说，对于每个2-3-4树，都存在至少一个数据元素是同样次序的红黑树。在2-3-4树上的插入和删除操作也等同于在红黑树中颜色翻转和旋转。这使得2-3-4树成为理解红黑树背后的逻辑的重要工具，这也是很多介绍算法的教科书在红黑树之前介绍2-3-4树的原因，尽管2-3-4树在实践中不经常使用。","fragment_id":"用途和好处_3","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"性质","totalbranchnum":0,"type":"branch","totalleafnum":6,"children":[{"url":"","content":"红黑树是每个节点都带有<i>颜色</i>属性的<a title=\"二叉查找树\" href=\"/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9\">二叉查找树</a>，颜色为<i>红色</i>或<i>黑色</i>。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：","fragment_id":"性质_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li>节点是红色或黑色。</li> \n<li>根是黑色。</li> \n<li>所有叶子都是黑色（叶子是NIL节点）。</li> \n<li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li> \n<li>从任一节点到其每个叶子的所有<a title=\"道路 (图论)\" href=\"/wiki/%E9%81%93%E8%B7%AF_(%E5%9B%BE%E8%AE%BA)\">简单路径</a>都包含相同数目的黑色节点。</li>","fragment_id":"性质_2","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<div class=\"floatnone\">\n <a title=\"An example of a red-black tree\" class=\"image\" href=\"/wiki/File:Red-black_tree_example.svg\"><img width=\"450\" height=\"217\" alt=\"An example of a red-black tree\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/450px-Red-black_tree_example.svg.png\" data-file-height=\"650\" data-file-width=\"1350\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/675px-Red-black_tree_example.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/900px-Red-black_tree_example.svg.png 2x\" /></a>\n</div>","fragment_id":"性质_3","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的<a title=\"二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\">二叉查找树</a>。","fragment_id":"性质_4","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"要知道为什么这些性质确保了这个结果，注意到性质4导致了路径不能有两个毗连的红色节点就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质5所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。","fragment_id":"性质_5","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"在很多树数据结构的表示中，一个节点有可能只有一个子节点，而叶子节点包含数据。用这种范例表示红黑树是可能的，但是这会改变一些性质并使算法复杂。为此，本文中我们使用&quot;nil叶子&quot;或&quot;空（null）叶子&quot;，如上图所示，它不包含数据而只充当树在此结束的指示。这些节点在绘图中经常被省略，导致了这些树好像同上述原则相矛盾，而实际上不是这样。与此有关的结论是所有节点都有两个子节点，尽管其中的一个或两个可能是空叶子。","fragment_id":"性质_6","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":1,"facet_name":"操作","totalbranchnum":3,"type":"branch","totalleafnum":3,"children":[{"totalbranchlevel":0,"facet_name":"插入","totalbranchnum":0,"type":"branch","totalleafnum":13,"children":[{"url":"","content":"我们首先<a title=\"二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91#.E6.8F.92.E5.85.A5\">以二叉查找树的方法</a>增加节点并标记它为红色。（如果设为黑色，就会导致根到叶子的路径上有一条路上，多一个额外的黑节点，这个是很难调整的。但是设为红色节点后，可能会导致出现两个连续红色节点的冲突，那么可以通过颜色调换（color flips）和树旋转来调整。）下面要进行什么操作取决于其他临近节点的颜色。同人类的家族树中一样，我们将使用术语<i>叔父节点</i>来指一个节点的父节点的兄弟节点。注意：","fragment_id":"插入_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"在下面的示意图中，将要插入的节点标为<b>N</b>，N的父节点标为<b>P</b>，N的祖父节点标为<b>G</b>，N的叔父节点标为<b>U</b>。在图中展示的任何颜色要么是由它所处情形这些所作的假定，要么是假定所暗含（imply）的。","fragment_id":"插入_2","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"nf\">grandparent</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">){</span>\n     <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n\n <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"nf\">uncle</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">){</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span> <span class=\"n\">grandparent</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n     <span class=\"k\">else</span>\n         <span class=\"k\">return</span> <span class=\"n\">grandparent</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre>","fragment_id":"插入_3","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"kt\">void</span> <span class=\"nf\">insert_case1</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">){</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n         <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n     <span class=\"k\">else</span>\n         <span class=\"n\">insert_case2</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>","fragment_id":"插入_4","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<b>情形2</b>:新节点的父节点P是黑色，所以性质4没有失效（新节点是红色的）。在这种情形下，树仍是有效的。性质5也未受到威胁，尽管新节点N有两个黑色叶子子节点；但由于新节点N是红色，通过它的每个子节点的路径就都有同通过它所取代的黑色的叶子的路径同样数目的黑色节点，所以依然满足这个性质。","fragment_id":"插入_5","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"kt\">void</span> <span class=\"nf\">insert_case2</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">){</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span>\n         <span class=\"k\">return</span><span class=\"p\">;</span> <span class=\"cm\">/* 树仍旧有效*/</span>\n     <span class=\"k\">else</span>\n         <span class=\"n\">insert_case3</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>","fragment_id":"插入_6","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形3示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_insert_case_3.png\"><img width=\"300\" height=\"139\" alt=\"情形3示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/c/c8/Red-black_tree_insert_case_3.png\" data-file-height=\"139\" data-file-width=\"300\" /></a>\n   </div> <p><b>情形3</b>:如果父节点P和叔父节点U二者都是红色，（此时新插入节点N做为P的左子节点或右子节点都属于情形3，这里右图仅显示N做为P左子的情形）则我们可以将它们两个重绘为黑色并重绘祖父节点G为红色（用来保持性质5）。现在我们的新节点N有了一个黑色的父节点P。因为通过父节点P或叔父节点U的任何路径都必定通过祖父节点G，在这些路径上的黑节点数目没有改变。但是，红色的祖父节点G可能是根节点，这就违反了性质2，也有可能祖父节点G的父节点是红色的，这就违反了性质4。为了解决这个问题，我们在祖父节点G上递归地进行<b>情形1</b>的整个过程。（把G当成是新加入的节点进行各种情形的检查）</p> </td> \n </tr> \n</tbody>","fragment_id":"插入_7","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"kt\">void</span> <span class=\"nf\">insert_case3</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">){</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">uncle</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">uncle</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n         <span class=\"n\">uncle</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n         <span class=\"n\">grandparent</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n         <span class=\"n\">insert_case1</span><span class=\"p\">(</span><span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span>\n     <span class=\"p\">}</span>\n     <span class=\"k\">else</span>\n         <span class=\"n\">insert_case4</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>","fragment_id":"插入_8","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形4示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_insert_case_4.png\"><img width=\"283\" height=\"138\" alt=\"情形4示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/5/56/Red-black_tree_insert_case_4.png\" data-file-height=\"138\" data-file-width=\"283\" /></a>\n   </div> <p><b>情形4</b>:父节点P是红色而叔父节点U是黑色或缺少，并且新节点N是其父节点P的右子节点而父节点P又是其父节点的左子节点。在这种情形下，我们进行一次<a title=\"树旋转\" href=\"/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC\">左旋转</a>调换新节点和其父节点的角色;接着，我们按<b>情形5</b>处理以前的父节点P以解决仍然失效的性质4。注意这个改变会导致某些路径通过它们以前不通过的新节点N（比如图中1号叶子节点）或不通过节点P（比如图中3号叶子节点），但由于这两个节点都是红色的，所以性质5仍有效。</p> </td> \n </tr> \n</tbody>","fragment_id":"插入_9","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"kt\">void</span> <span class=\"nf\">insert_case4</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">){</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n         <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n         <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">insert_case5</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>","fragment_id":"插入_10","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形5示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_insert_case_5.png\"><img width=\"310\" height=\"138\" alt=\"情形5示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_insert_case_5.png\" data-file-height=\"138\" data-file-width=\"310\" /></a>\n   </div> <p><b>情形5</b>：父节点P是红色而叔父节点U是黑色或缺少，新节点N是其父节点的左子节点，而父节点P又是其父节点G的左子节点。在这种情形下，我们进行针对祖父节点G的一次<a title=\"树旋转\" href=\"/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC\">右旋转</a>；在旋转产生的树中，以前的父节点P现在是新节点N和以前的祖父节点G的父节点。我们知道以前的祖父节点G是黑色，否则父节点P就不可能是红色（如果P和G都是红色就违反了性质4，所以G必须是黑色）。我们切换以前的父节点P和祖父节点G的颜色，结果的树满足性质4。性质5也仍然保持满足，因为通过这三个节点中任何一个的所有路径以前都通过祖父节点G，现在它们都通过以前的父节点P。在各自的情形下，这都是三个节点中唯一的黑色节点。</p> </td> \n </tr> \n</tbody>","fragment_id":"插入_11","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre> <span class=\"kt\">void</span> <span class=\"nf\">insert_case5</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">){</span>\n     <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n     <span class=\"n\">grandparent</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span>\n     <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n         <span class=\"cm\">/* Here, n == n-&gt;parent-&gt;right &amp;&amp; n-&gt;parent == grandparent (n)-&gt;right */</span>\n         <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span>\n     <span class=\"p\">}</span>\n <span class=\"p\">}</span>\n</pre>","fragment_id":"插入_12","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"注意插入实际上是<a title=\"原地算法\" href=\"/wiki/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地算法</a>，因为上述所有调用都使用了<a title=\"尾部递归\" class=\"mw-redirect\" href=\"/wiki/%E5%B0%BE%E9%83%A8%E9%80%92%E5%BD%92\">尾部递归</a>。","fragment_id":"插入_13","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"删除","totalbranchnum":0,"type":"branch","totalleafnum":18,"children":[{"url":"","content":"<b>如果需要删除的节点有两个儿子，那么问题可以被转化成删除另一个只有一个儿子的节点的问题</b>（为了表述方便，这里所指的儿子，为非叶子节点的儿子）。对于二叉查找树，在删除带有两个非叶子儿子的节点的时候，我们找到要么在它的左子树中的最大元素、要么在它的右子树中的最小元素，并把它的值转移到要删除的节点中（如在<a title=\"二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\">这里</a>所展示的那样）。我们接着删除我们从中复制出值的那个节点，它必定有少于两个非叶子的儿子。因为只是复制了一个值，不违反任何性质，这就把问题简化为如何删除最多有一个儿子的节点的问题。它不关心这个节点是最初要删除的节点还是我们从中复制出值的那个节点。","fragment_id":"删除_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"在本文余下的部分中，<b>我们只需要讨论删除只有一个儿子的节点</b>（如果它两个儿子都为空，即均为叶子，我们任意将其中一个看作它的儿子）。如果我们删除一个红色节点（此时该节点的儿子将都为叶子节点），它的父亲和儿子一定是黑色的。所以我们可以简单的用它的黑色儿子替换它，并不会破坏性质3和性质4。通过被删除节点的所有路径只是少了一个红色节点，这样可以继续保证性质5。另一种简单情况是在被删除节点是黑色而它的儿子是红色的时候。如果只是去除这个黑色节点，用它的红色儿子顶替上来的话，会破坏性质5，但是如果我们重绘它的儿子为黑色，则曾经通过它的所有路径将通过它的黑色儿子，这样可以继续保持性质5。","fragment_id":"删除_2","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<b>需要进一步讨论的是在要删除的节点和它的儿子二者都是黑色的时候</b>，这是一种复杂的情况。我们首先把要删除的节点替换为它的儿子。出于方便，称呼这个儿子为<b>N</b>（在新的位置上），称呼它的兄弟（它父亲的另一个儿子）为<b>S</b>。在下面的示意图中，我们还是使用<b>P</b>称呼N的父亲，<b>S<sub>L</sub></b>称呼S的左儿子，<b>S<sub>R</sub></b>称呼S的右儿子。我们将使用下述函数找到兄弟节点：","fragment_id":"删除_3","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span>\n<span class=\"nf\">sibling</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_4","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"我们可以使用下列代码进行上述的概要步骤，这里的函数<code>replace_node</code>替换<code>child</code>到<code>n</code>在树中的位置。出于方便，在本章节中的代码将假定空叶子被用不是NULL的实际节点对象来表示（在<i>插入</i>章节中的代码可以同任何一种表示一起工作）。","fragment_id":"删除_5","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"kt\">void</span>\n<span class=\"nf\">delete_one_child</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"cm\">/*</span>\n<span class=\"cm\">         * Precondition: n has at most one non-null child.</span>\n<span class=\"cm\">         */</span>\n        <span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">is_leaf</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"o\">?</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"nl\">left</span> <span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n \n        <span class=\"n\">replace_node</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">){</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">)</span>\n                        <span class=\"n\">child</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                <span class=\"k\">else</span>\n                        <span class=\"n\">delete_case1</span> <span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">free</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_6","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"kt\">void</span>\n<span class=\"nf\">delete_case1</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n                <span class=\"n\">delete_case2</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_7","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形2示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_delete_case_2.png\"><img width=\"298\" height=\"136\" alt=\"情形2示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/3/39/Red-black_tree_delete_case_2.png\" data-file-height=\"136\" data-file-width=\"298\" /></a>\n   </div> <p><b>情形2：</b> S是红色。在这种情形下我们在N的父亲上做<a title=\"树旋转\" href=\"/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC\">左旋转</a>，把红色兄弟转换成N的祖父，我们接着对调N的父亲和祖父的颜色。完成这两个操作后，尽管所有路径上黑色节点的数目没有改变，但现在N有了一个黑色的兄弟和一个红色的父亲（它的新兄弟是黑色因为它是红色S的一个儿子），所以我们可以接下去按<b>情形4</b>、<b>情形5</b>或<b>情形6</b>来处理。</p> <p>（注意：这里的图中没有显示出来，N是删除了黑色节点后替换上来的子节点，所以这个过程中由P-&gt;X-&gt;N变成了P-&gt;N，实际上是少了一个黑色节点，也可以理解为Parent(Black)和Silbing(Red)那么他们的孩子黑色节点的数目肯定不等，让他们做新兄弟肯定是不平衡的，还需后面继续处理。这里看英文版本的<a class=\"external autonumber\" href=\"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree\">[1]</a>比较的明了）</p> </td> \n </tr> \n</tbody>","fragment_id":"删除_8","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"kt\">void</span>\n<span class=\"nf\">delete_case2</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sibling</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">){</span>\n                <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">)</span>\n                        <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n                <span class=\"k\">else</span>\n                        <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> \n        <span class=\"n\">delete_case3</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_9","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形3示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_delete_case_3.png\"><img width=\"313\" height=\"132\" alt=\"情形3示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/c/c7/Red-black_tree_delete_case_3.png\" data-file-height=\"132\" data-file-width=\"313\" /></a>\n   </div> <p><b>情形3：</b> N的父亲、S和S的儿子都是黑色的。在这种情形下，我们简单的重绘S为红色。结果是通过S的所有路径，它们就是以前<i>不</i>通过N的那些路径，都少了一个黑色节点。因为删除N的初始的父亲使通过N的所有路径少了一个黑色节点，这使事情都平衡了起来。但是，通过P的所有路径现在比不通过P的路径少了一个黑色节点，所以仍然违反性质5。要修正这个问题，我们要从<b>情形1</b>开始，在P上做重新平衡处理。</p> </td> \n </tr> \n</tbody>","fragment_id":"删除_10","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"kt\">void</span>\n<span class=\"nf\">delete_case3</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sibling</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n \n        <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                <span class=\"n\">delete_case1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">delete_case4</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_11","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形4示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_delete_case_4.png\"><img width=\"313\" height=\"132\" alt=\"情形4示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/d/d7/Red-black_tree_delete_case_4.png\" data-file-height=\"132\" data-file-width=\"313\" /></a>\n   </div> <p><b>情形4：</b> S和S的儿子都是黑色，但是N的父亲是红色。在这种情形下，我们简单的交换N的兄弟和父亲的颜色。这不影响不通过N的路径的黑色节点的数目，但是它在通过N的路径上对黑色节点数目增加了一，添补了在这些路径上删除的黑色节点。</p> </td> \n </tr> \n</tbody>","fragment_id":"删除_12","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"kt\">void</span>\n<span class=\"nf\">delete_case4</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sibling</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n \n        <span class=\"k\">if</span><span class=\"err\">（</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">delete_case5</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_13","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形5示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_delete_case_5.png\"><img width=\"247\" height=\"133\" alt=\"情形5示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/3/30/Red-black_tree_delete_case_5.png\" data-file-height=\"133\" data-file-width=\"247\" /></a>\n   </div> <p><b>情形5：</b> S是黑色，S的左儿子是红色，S的右儿子是黑色，而N是它父亲的左儿子。在这种情形下我们在S上做<a title=\"树旋转\" href=\"/wiki/%E6%A0%91%E6%97%8B%E8%BD%AC\">右旋转</a>，这样S的左儿子成为S的父亲和N的新兄弟。我们接着交换S和它的新父亲的颜色。所有路径仍有同样数目的黑色节点，但是现在N有了一个黑色兄弟，他的右儿子是红色的，所以我们进入了<b>情形6</b>。N和它的父亲都不受这个变换的影响。</p> </td> \n </tr> \n</tbody>","fragment_id":"删除_14","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"kt\">void</span>\n<span class=\"nf\">delete_case5</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sibling</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n \n        <span class=\"k\">if</span><span class=\"err\">（</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">){</span> <span class=\"cm\">/* this if statement is trivial, </span>\n<span class=\"cm\">due to Case 2(even though Case two changed the sibling to a sibling's child, </span>\n<span class=\"cm\">the sibling's child can't be red, since no red parent can have a red child). */</span>\n<span class=\"c1\">// the following statements just force the red to be on the left of the left of the parent, </span>\n<span class=\"c1\">// or right of the right, so case six will rotate correctly.</span>\n                <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"c1\">// this last test is trivial too due to cases 2-4.</span>\n                        <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                        <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                        <span class=\"n\">rotate_right</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span><span class=\"o\">&amp;&amp;</span>\n<span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">))</span> <span class=\"p\">{</span><span class=\"c1\">// this last test is trivial too due to cases 2-4.</span>\n                        <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                        <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                        <span class=\"n\">rotate_left</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">delete_case6</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_15","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td> \n   <div class=\"floatright\">\n    <a title=\"情形6示意图\" class=\"image\" href=\"/wiki/File:Red-black_tree_delete_case_6.png\"><img width=\"299\" height=\"143\" alt=\"情形6示意图\" src=\"//upload.wikimedia.org/wikipedia/commons/3/31/Red-black_tree_delete_case_6.png\" data-file-height=\"143\" data-file-width=\"299\" /></a>\n   </div> <p><b>情形6：</b> S是黑色，S的右儿子是红色，而N是它父亲的左儿子。在这种情形下我们在N的父亲上做左旋转，这样S成为N的父亲（P）和S的右儿子的父亲。我们接着交换N的父亲和S的颜色，并使S的右儿子为黑色。子树在它的根上的仍是同样的颜色，所以性质3没有被违反。但是，N现在增加了一个黑色祖先：要么N的父亲变成黑色，要么它是黑色而S被增加为一个黑色祖父。所以，通过N的路径都增加了一个黑色节点。</p> <p>此时，如果一个路径不通过N，则有两种可能性：</p> \n   <ul> \n    <li>它通过N的新兄弟。那么它以前和现在都必定通过S和N的父亲，而它们只是交换了颜色。所以路径保持了同样数目的黑色节点。</li> \n    <li>它通过N的新叔父，S的右儿子。那么它以前通过S、S的父亲和S的右儿子，但是现在只通过S，它被假定为它以前的父亲的颜色，和S的右儿子，它被从红色改变为黑色。合成效果是这个路径通过了同样数目的黑色节点。</li> \n   </ul> <p>在任何情况下，在这些路径上的黑色节点数目都没有改变。所以我们恢复了性质4。在示意图中的白色节点可以是红色或黑色，但是在变换前后都必须指定相同的颜色。</p> </td> \n </tr> \n</tbody>","fragment_id":"删除_16","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<pre><span class=\"kt\">void</span>\n<span class=\"nf\">delete_case6</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"k\">struct</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">sibling</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n \n        <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span><span class=\"p\">;</span>\n        <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">){</span>\n                <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">s</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>","fragment_id":"删除_17","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"同样的，函数调用都使用了<a title=\"尾部递归\" class=\"mw-redirect\" href=\"/wiki/%E5%B0%BE%E9%83%A8%E9%80%92%E5%BD%92\">尾部递归</a>，所以算法是<a title=\"原地算法\" href=\"/wiki/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地算法</a>。此外，在旋转之后不再做递归调用，所以进行了恒定数目（最多3次）的旋转。","fragment_id":"删除_18","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"C++示例代码","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"","content":"<pre><span class=\"cp\">#define BLACK 1</span>\n<span class=\"cp\">#define RED 0</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span>\n\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">bst</span> <span class=\"p\">{</span>\n<span class=\"k\">private</span><span class=\"o\">:</span>\n\n    <span class=\"k\">struct</span> <span class=\"n\">Node</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n        <span class=\"kt\">bool</span> <span class=\"n\">color</span><span class=\"p\">;</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">leftTree</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rightTree</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">;</span>\n\n        <span class=\"n\">Node</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n            <span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">grandparent</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n                <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">uncle</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">grandparent</span><span class=\"p\">(</span><span class=\"err\">）</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"nf\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">sibling</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">gp</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">();</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">;</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">;</span>\n\n        <span class=\"n\">fa</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">!=</span> <span class=\"n\">NIL</span><span class=\"p\">)</span>\n            <span class=\"n\">y</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">;</span>\n        <span class=\"n\">fa</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">)</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">gp</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">gp</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">gp</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">)</span>\n                <span class=\"n\">gp</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">gp</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">gp</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">();</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">;</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">;</span>\n\n        <span class=\"n\">fa</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">!=</span> <span class=\"n\">NIL</span><span class=\"p\">)</span>\n            <span class=\"n\">y</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">;</span>\n        <span class=\"n\">fa</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">)</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">gp</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">gp</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">gp</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">)</span>\n                <span class=\"n\">gp</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">gp</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">inorder</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">)</span>\n            <span class=\"n\">inorder</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">);</span>\n\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; &quot;</span><span class=\"p\">;</span>\n                \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">)</span>\n            <span class=\"n\">inorder</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">string</span> <span class=\"nf\">outputColor</span> <span class=\"p\">(</span><span class=\"kt\">bool</span> <span class=\"n\">color</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">color</span> <span class=\"o\">?</span> <span class=\"s\">&quot;BLACK&quot;</span> <span class=\"o\">:</span> <span class=\"s\">&quot;RED&quot;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"nf\">getSmallestChild</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">getSmallestChild</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">bool</span> <span class=\"nf\">delete_child</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span><span class=\"p\">){</span>\n                <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">delete_child</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span><span class=\"p\">){</span>\n                <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">delete_child</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span><span class=\"p\">){</span>\n                <span class=\"n\">delete_one_child</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">smallest</span> <span class=\"o\">=</span> <span class=\"n\">getSmallestChild</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">);</span>\n            <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">smallest</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">);</span>\n            <span class=\"n\">delete_one_child</span> <span class=\"p\">(</span><span class=\"n\">smallest</span><span class=\"p\">);</span>\n\n            <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span>\n           <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n         <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">delete_one_child</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span> <span class=\"o\">?</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"nl\">rightTree</span> <span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span><span class=\"p\">){</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n            <span class=\"k\">delete</span>  <span class=\"n\">p</span><span class=\"p\">;</span>\n            <span class=\"n\">child</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">){</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">child</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">){</span>\n                <span class=\"n\">child</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span>\n                <span class=\"n\">delete_case</span> <span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">delete</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">delete_case</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">)</span>\n                <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">());</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">());</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span>\n                <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n            <span class=\"n\">delete_case</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span>\n                <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span>\n                        <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                    <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">BLACK</span>\n                        <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                    <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span><span class=\"p\">;</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">){</span>\n                <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">sibling</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">&gt;=</span> <span class=\"n\">data</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">!=</span> <span class=\"n\">NIL</span><span class=\"p\">)</span>\n                <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">);</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">();</span>\n                <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n                <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">NIL</span><span class=\"p\">;</span>\n                <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n                <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n                <span class=\"n\">insert_case</span> <span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">!=</span> <span class=\"n\">NIL</span><span class=\"p\">)</span>\n                <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">);</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">();</span>\n                <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n                <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">NIL</span><span class=\"p\">;</span>\n                <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n                <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n                <span class=\"n\">insert_case</span> <span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">insert_case</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n            <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">uncle</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">==</span> <span class=\"n\">RED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">uncle</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                <span class=\"n\">insert_case</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">rotate_left</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n                    <span class=\"n\">rotate_right</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">rotate_right</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n                    <span class=\"n\">rotate_left</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                    <span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n                    <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">grandparent</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">RED</span><span class=\"p\">;</span>\n                    <span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">parent</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"nf\">DeleteTree</span><span class=\"p\">(</span><span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span> <span class=\"o\">||</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">NIL</span><span class=\"p\">){</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">DeleteTree</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span><span class=\"p\">);</span>\n        <span class=\"n\">DeleteTree</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span><span class=\"p\">);</span>\n        <span class=\"k\">delete</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n\n    <span class=\"n\">bst</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">NIL</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">();</span>\n        <span class=\"n\">NIL</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n        <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">~</span><span class=\"n\">bst</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n            <span class=\"n\">DeleteTree</span> <span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">);</span>\n        <span class=\"k\">delete</span> <span class=\"n\">NIL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">inorder</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"n\">inorder</span> <span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">);</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">root</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">){</span>\n            <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Node</span><span class=\"p\">();</span>\n            <span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">BLACK</span><span class=\"p\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">leftTree</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">rightTree</span> <span class=\"o\">=</span> <span class=\"n\">NIL</span><span class=\"p\">;</span>\n            <span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">bool</span> <span class=\"n\">delete_value</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">delete_child</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"n\">Node</span> <span class=\"o\">*</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">NIL</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre>","fragment_id":"C++示例代码_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]}]},{"totalbranchlevel":0,"facet_name":"渐进边界的证明","totalbranchnum":0,"type":"branch","totalleafnum":14,"children":[{"url":"","content":"包含<i>n</i>个内部节点的红黑树的高度是<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mtext>\n        O\n       </mtext> \n      </mrow> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       log\n      </mi> \n      <mo>\n       ⁡\n       <!-- ⁡ -->\n      </mo> \n      <mi>\n       n\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle {\\text{O}}(\\log n)}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.44ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle {\\text{O}}(\\log n)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/67697a0b44080bbf967c00d60bf4aac79f9ce385\" /></span>。","fragment_id":"渐进边界的证明_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n   <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n    <semantics> \n     <mrow class=\"MJX-TeXAtom-ORD\"> \n      <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n       <mi>\n        h\n       </mi> \n       <mo stretchy=\"false\">\n        (\n       </mo> \n       <mi>\n        v\n       </mi> \n       <mo stretchy=\"false\">\n        )\n       </mo> \n      </mstyle> \n     </mrow> \n     <annotation encoding=\"application/x-tex\">\n      {\\displaystyle h(v)}\n     </annotation> \n    </semantics> \n   </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 4.31ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle h(v)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/5642c579b0a2d0271b1ecb418390f78902d5de45\" /></span>表示以节点<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n   <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n    <semantics> \n     <mrow class=\"MJX-TeXAtom-ORD\"> \n      <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n       <mi>\n        v\n       </mi> \n      </mstyle> \n     </mrow> \n     <annotation encoding=\"application/x-tex\">\n      {\\displaystyle v}\n     </annotation> \n    </semantics> \n   </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.13ex; height: 1.67ex; vertical-align: -0.33ex;\" alt=\"v\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/e07b00e7fc0847fbd16391c778d65bc25c452597\" /></span>为根的子树的高度。</li> \n<li><span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n   <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n    <semantics> \n     <mrow class=\"MJX-TeXAtom-ORD\"> \n      <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n       <mi>\n        b\n       </mi> \n       <mi>\n        h\n       </mi> \n       <mo stretchy=\"false\">\n        (\n       </mo> \n       <mi>\n        v\n       </mi> \n       <mo stretchy=\"false\">\n        )\n       </mo> \n      </mstyle> \n     </mrow> \n     <annotation encoding=\"application/x-tex\">\n      {\\displaystyle bh(v)}\n     </annotation> \n    </semantics> \n   </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 5.32ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle bh(v)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/edecab9e493f2d00d65835de1bb3ccf1f93f9ccc\" /></span>表示从<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n   <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n    <semantics> \n     <mrow class=\"MJX-TeXAtom-ORD\"> \n      <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n       <mi>\n        v\n       </mi> \n      </mstyle> \n     </mrow> \n     <annotation encoding=\"application/x-tex\">\n      {\\displaystyle v}\n     </annotation> \n    </semantics> \n   </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.13ex; height: 1.67ex; vertical-align: -0.33ex;\" alt=\"v\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/e07b00e7fc0847fbd16391c778d65bc25c452597\" /></span>到子树中任何叶子的黑色节点的数目（如果<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n   <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n    <semantics> \n     <mrow class=\"MJX-TeXAtom-ORD\"> \n      <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n       <mi>\n        v\n       </mi> \n      </mstyle> \n     </mrow> \n     <annotation encoding=\"application/x-tex\">\n      {\\displaystyle v}\n     </annotation> \n    </semantics> \n   </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.13ex; height: 1.67ex; vertical-align: -0.33ex;\" alt=\"v\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/e07b00e7fc0847fbd16391c778d65bc25c452597\" /></span>是黑色则不计数它，也叫做黑色高度）。</li>","fragment_id":"渐进边界的证明_2","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<b>引理</b>：以节点<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       v\n      </mi> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.13ex; height: 1.67ex; vertical-align: -0.33ex;\" alt=\"v\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/e07b00e7fc0847fbd16391c778d65bc25c452597\" /></span>为根的子树有至少<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <mi>\n         v\n        </mi> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{bh(v)}-1}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 9.19ex; height: 2.84ex; vertical-align: -0.33ex;\" alt=\"2^{{bh(v)}}-1\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/bd20e4a4bb09ff8a0b1f669e13d80a767fd380dc\" /></span>个内部节点。","fragment_id":"渐进边界的证明_3","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"基础：<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       h\n      </mi> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       v\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n      <mo>\n       =\n      </mo> \n      <mn>\n       0\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle h(v)=0}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.6ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle h(v)=0}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/6ba4aa8d1639299c3d9d817362da26c3434d65f9\" /></span>","fragment_id":"渐进边界的证明_4","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"如果<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       v\n      </mi> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.13ex; height: 1.67ex; vertical-align: -0.33ex;\" alt=\"v\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/e07b00e7fc0847fbd16391c778d65bc25c452597\" /></span>的高度是零则它必定是NIL，因此<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       b\n      </mi> \n      <mi>\n       h\n      </mi> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       v\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n      <mo>\n       =\n      </mo> \n      <mn>\n       0\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle bh(v)=0}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 9.6ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle bh(v)=0}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/ba5e82b45e534576878d58de11a6aaaf963574e6\" /></span>。所以：","fragment_id":"渐进边界的证明_5","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <mi>\n         v\n        </mi> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo>\n       =\n      </mo> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mn>\n         0\n        </mn> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo>\n       =\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo>\n       =\n      </mo> \n      <mn>\n       0\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{bh(v)}-1=2^{0}-1=1-1=0}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 31.14ex; height: 2.84ex; vertical-align: -0.33ex;\" alt=\"2^{{bh(v)}}-1=2^{{0}}-1=1-1=0\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/ff9f9c03b2a1d90a61e2c983de3a4a32859f7a0e\" /></span>","fragment_id":"渐进边界的证明_6","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"归纳假设：<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       h\n      </mi> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       v\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n      <mo>\n       =\n      </mo> \n      <mi>\n       k\n      </mi> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle h(v)=k}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.64ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle h(v)=k}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/bae1030fdd55fbdc3272244371b41403a3368c44\" /></span>的<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       v\n      </mi> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.13ex; height: 1.67ex; vertical-align: -0.33ex;\" alt=\"v\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/e07b00e7fc0847fbd16391c778d65bc25c452597\" /></span>有<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <mi>\n         v\n        </mi> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n        <mo>\n         −\n         <!-- − -->\n        </mo> \n        <mn>\n         1\n        </mn> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{bh(v)-1}-1}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 11.31ex; height: 2.84ex; vertical-align: -0.33ex;\" alt=\"2^{{bh(v)-1}}-1\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/ffbd6a112daa51591194b8a2e89d158aeb673253\" /></span>个内部节点暗示了h(<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>) = k+1的<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>有<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <msup> \n         <mi>\n          v\n         </mi> \n         <mo>\n          ′\n         </mo> \n        </msup> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{bh(v')}-1}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 9.73ex; height: 2.84ex; vertical-align: -0.33ex;\" alt=\"2^{{bh(v')}}-1\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/89836b789850ab1dbccb41765e54847a9734d57a\" /></span>个内部节点。","fragment_id":"渐进边界的证明_7","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"因为<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>有h(<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>)&gt; 0所以它是个内部节点。同样的它有黑色高度要么是bh(<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>)要么是bh(<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>)-1（依据<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>是红色还是黑色）的两个儿子。通过归纳假设每个儿子都有至少<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <msup> \n         <mi>\n          v\n         </mi> \n         <mo>\n          ′\n         </mo> \n        </msup> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n        <mo>\n         −\n         <!-- − -->\n        </mo> \n        <mn>\n         1\n        </mn> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{bh(v')-1}-1}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 11.84ex; height: 2.84ex; vertical-align: -0.33ex;\" alt=\"2^{{bh(v')-1}}-1\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/0216c4028ab1738e9ea784c87a506f1f8d050dd4\" /></span>个内部接点，所以<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mi>\n        v\n       </mi> \n       <mo>\n        ′\n       </mo> \n      </msup> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle v'}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 1.83ex; height: 2.5ex; vertical-align: -0.33ex;\" alt=\"v'\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/19f1c5b0af1f30c41cb8bc0ba3bfea98681da268\" /></span>有：","fragment_id":"渐进边界的证明_8","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <msup> \n         <mi>\n          v\n         </mi> \n         <mo>\n          ′\n         </mo> \n        </msup> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n        <mo>\n         −\n         <!-- − -->\n        </mo> \n        <mn>\n         1\n        </mn> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo>\n       +\n      </mo> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <msup> \n         <mi>\n          v\n         </mi> \n         <mo>\n          ′\n         </mo> \n        </msup> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n        <mo>\n         −\n         <!-- − -->\n        </mo> \n        <mn>\n         1\n        </mn> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo>\n       +\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo>\n       =\n      </mo> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mi>\n         b\n        </mi> \n        <mi>\n         h\n        </mi> \n        <mo stretchy=\"false\">\n         (\n        </mo> \n        <msup> \n         <mi>\n          v\n         </mi> \n         <mo>\n          ′\n         </mo> \n        </msup> \n        <mo stretchy=\"false\">\n         )\n        </mo> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle 2^{bh(v')-1}-1+2^{bh(v')-1}-1+1=2^{bh(v')}-1}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 43.41ex; height: 3ex; vertical-align: -0.5ex;\" alt=\"2^{{bh(v')-1}}-1+2^{{bh(v')-1}}-1+1=2^{{bh(v')}}-1\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/8a1682e47a748de66e8bbb72355a047216b3ede7\" /></span>","fragment_id":"渐进边界的证明_9","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"使用这个引理我们现在可以展示出树的高度是对数性的。因为在从根到叶子的任何路径上至少有一半的节点是黑色（根据红黑树性质4），根的黑色高度至少是<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mfrac> \n        <mrow> \n         <mi>\n          h\n         </mi> \n         <mo stretchy=\"false\">\n          (\n         </mo> \n         <mi>\n          r\n         </mi> \n         <mi>\n          o\n         </mi> \n         <mi>\n          o\n         </mi> \n         <mi>\n          t\n         </mi> \n         <mo stretchy=\"false\">\n          )\n         </mo> \n        </mrow> \n        <mn>\n         2\n        </mn> \n       </mfrac> \n      </mrow> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle {\\frac {h(root)}{2}}}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.2ex; height: 5.67ex; vertical-align: -1.83ex;\" alt=\"{\\displaystyle {\\frac {h(root)}{2}}}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/d240094339724654471bac68bc0a40d0e08482e2\" /></span>。通过引理我们得到：","fragment_id":"渐进边界的证明_10","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mi>\n       n\n      </mi> \n      <mo>\n       ⩾\n       <!-- ⩾ -->\n      </mo> \n      <msup> \n       <mn>\n        2\n       </mn> \n       <mrow class=\"MJX-TeXAtom-ORD\"> \n        <mfrac> \n         <mrow> \n          <mi>\n           h\n          </mi> \n          <mo stretchy=\"false\">\n           (\n          </mo> \n          <mi>\n           r\n          </mi> \n          <mi>\n           o\n          </mi> \n          <mi>\n           o\n          </mi> \n          <mi>\n           t\n          </mi> \n          <mo stretchy=\"false\">\n           )\n          </mo> \n         </mrow> \n         <mn>\n          2\n         </mn> \n        </mfrac> \n       </mrow> \n      </msup> \n      <mo>\n       −\n       <!-- − -->\n      </mo> \n      <mn>\n       1\n      </mn> \n      <mo stretchy=\"false\">\n       ↔\n       <!-- ↔ -->\n      </mo> \n      <mspace width=\"thickmathspace\"></mspace> \n      <mi>\n       log\n      </mi> \n      <mo>\n       ⁡\n       <!-- ⁡ -->\n      </mo> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mo stretchy=\"false\">\n        (\n       </mo> \n       <mi>\n        n\n       </mi> \n       <mo>\n        +\n       </mo> \n       <mn>\n        1\n       </mn> \n       <mo stretchy=\"false\">\n        )\n       </mo> \n      </mrow> \n      <mo>\n       ⩾\n       <!-- ⩾ -->\n      </mo> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mfrac> \n        <mrow> \n         <mi>\n          h\n         </mi> \n         <mo stretchy=\"false\">\n          (\n         </mo> \n         <mi>\n          r\n         </mi> \n         <mi>\n          o\n         </mi> \n         <mi>\n          o\n         </mi> \n         <mi>\n          t\n         </mi> \n         <mo stretchy=\"false\">\n          )\n         </mo> \n        </mrow> \n        <mn>\n         2\n        </mn> \n       </mfrac> \n      </mrow> \n      <mo stretchy=\"false\">\n       ↔\n       <!-- ↔ -->\n      </mo> \n      <mspace width=\"thickmathspace\"></mspace> \n      <mi>\n       h\n      </mi> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       r\n      </mi> \n      <mi>\n       o\n      </mi> \n      <mi>\n       o\n      </mi> \n      <mi>\n       t\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n      <mo>\n       ⩽\n       <!-- ⩽ -->\n      </mo> \n      <mn>\n       2\n      </mn> \n      <mi>\n       log\n      </mi> \n      <mo>\n       ⁡\n       <!-- ⁡ -->\n      </mo> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mo stretchy=\"false\">\n        (\n       </mo> \n       <mi>\n        n\n       </mi> \n       <mo>\n        +\n       </mo> \n       <mn>\n        1\n       </mn> \n       <mo stretchy=\"false\">\n        )\n       </mo> \n      </mrow> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle n\\geqslant 2^{\\frac {h(root)}{2}}-1\\leftrightarrow \\;\\log {(n+1)}\\geqslant {\\frac {h(root)}{2}}\\leftrightarrow \\;h(root)\\leqslant 2\\log {(n+1)}}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 68.18ex; height: 5.67ex; vertical-align: -1.83ex;\" alt=\"n\\geqslant 2^{{{\\frac  {h(root)}{2}}}}-1\\leftrightarrow \\;\\log {(n+1)}\\geqslant {\\frac  {h(root)}{2}}\\leftrightarrow \\;h(root)\\leqslant 2\\log {(n+1)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/16f0c429691a200154c7dcd7b81ae57266f01440\" /></span>","fragment_id":"渐进边界的证明_11","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"因此根的高度是<span class=\"mwe-math-element\"><span class=\"mwe-math-mathml-inline mwe-math-mathml-a11y\" style=\"display: none;\">\n  <math xmlns=\"http://www.w3.org/1998/Math/MathML\"> \n   <semantics> \n    <mrow class=\"MJX-TeXAtom-ORD\"> \n     <mstyle scriptlevel=\"0\" displaystyle=\"true\"> \n      <mrow class=\"MJX-TeXAtom-ORD\"> \n       <mtext>\n        O\n       </mtext> \n      </mrow> \n      <mo stretchy=\"false\">\n       (\n      </mo> \n      <mi>\n       log\n      </mi> \n      <mo>\n       ⁡\n       <!-- ⁡ -->\n      </mo> \n      <mi>\n       n\n      </mi> \n      <mo stretchy=\"false\">\n       )\n      </mo> \n     </mstyle> \n    </mrow> \n    <annotation encoding=\"application/x-tex\">\n     {\\displaystyle {\\text{O}}(\\log n)}\n    </annotation> \n   </semantics> \n  </math></span><img class=\"mwe-math-fallback-image-inline\" aria-hidden=\"true\" style=\"width: 8.44ex; height: 2.84ex; vertical-align: -0.83ex;\" alt=\"{\\displaystyle {\\text{O}}(\\log n)}\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/67697a0b44080bbf967c00d60bf4aac79f9ce385\" /></span>。","fragment_id":"渐进边界的证明_12","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"参见\"></span><span class=\"mw-headline\" id=\".E5.8F.82.E8.A7.81\">参见</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：参见\" href=\"/w/index.php?title=%E7%BA%A2%E9%BB%91%E6%A0%91&amp;action=edit&amp;section=8\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"渐进边界的证明_13","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li><a title=\"AVL树\" class=\"mw-redirect\" href=\"/wiki/AVL%E6%A8%B9\">AVL树</a></li> \n<li><a title=\"B树\" href=\"/wiki/B%E6%A0%91\">B树</a></li> \n<li><a title=\"Dancing tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Dancing_tree&amp;action=edit&amp;redlink=1\">dancing tree</a></li> \n<li><a title=\"伸展树\" class=\"mw-redirect\" href=\"/wiki/%E4%BC%B8%E5%B1%95%E6%A8%B9\">伸展树</a></li> \n<li><a title=\"2-3-4树\" href=\"/wiki/2-3-4%E6%A0%91\">2-3-4树</a></li> \n<li><a title=\"Treap\" class=\"mw-redirect\" href=\"/wiki/Treap\">Treap</a></li>","fragment_id":"渐进边界的证明_14","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]},{"totalbranchlevel":0,"facet_name":"引用","totalbranchnum":0,"type":"branch","totalleafnum":5,"children":[{"url":"","content":"<li><a class=\"external text\" href=\"http://mathworld.wolfram.com/Red-BlackTree.html\" rel=\"nofollow\">Mathworld: Red-Black Tree</a></li> \n<li><a class=\"external text\" href=\"http://www.eli.sdsu.edu/courses/fall95/cs660/notes/RedBlackTree/RedBlack.html#RTFToC2\" rel=\"nofollow\">San Diego State University: CS 660: Red-Black tree notes</a>, by Roger Whitney</li> \n<li>Cormen, Leiserson, Rivest, Stein. <i>Introduction to Algorithms.</i> Massachusetts: The MIT Press, 2002. pp273-77. <a class=\"internal mw-magiclink-isbn\" href=\"/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0070131511\">ISBN 0-07-013151-1</a></li>","fragment_id":"引用_1","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<span id=\"外部链接\"></span><span class=\"mw-headline\" id=\".E5.A4.96.E9.83.A8.E9.93.BE.E6.8E.A5\">外部链接</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a title=\"编辑小节：外部链接\" href=\"/w/index.php?title=%E7%BA%A2%E9%BB%91%E6%A0%91&amp;action=edit&amp;section=10\">编辑</a><span class=\"mw-editsection-bracket\">]</span></span>","fragment_id":"引用_2","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td class=\"mbox-image\"><img width=\"30\" height=\"40\" alt=\"\" src=\"//upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Commons-logo.svg/30px-Commons-logo.svg.png\" data-file-height=\"1376\" data-file-width=\"1024\" srcset=\"//upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Commons-logo.svg/45px-Commons-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Commons-logo.svg/59px-Commons-logo.svg.png 2x\" /></td> \n  <td class=\"mbox-text plainlist\"><a title=\"维基共享资源\" href=\"/wiki/%E7%BB%B4%E5%9F%BA%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90\">维基共享资源</a>中相关的多媒体资源：<b><a class=\"external text\" href=\"https://commons.wikimedia.org/wiki/Category:Red-Black_Trees?uselang=zh-cn\">红黑树</a></b></td> \n </tr> \n</tbody>","fragment_id":"引用_3","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<li><a class=\"external text\" href=\"http://www.ibr.cs.tu-bs.de/lehre/ss98/audii/applets/BST/RedBlackTree-Example.html\" rel=\"nofollow\">An applet + quick explanation</a></li> \n<li><a class=\"external text\" href=\"http://gauss.ececs.uc.edu/RedBlack/redblack.html\" rel=\"nofollow\">Red/Black Tree Demonstration</a></li> \n<li><a class=\"external text\" href=\"https://web.archive.org/web/20050706052539/http://www.aisee.com/anim/maple.htm\" rel=\"nofollow\">An example</a>（animated GIF, 200KB）</li> \n<li><a class=\"external text\" href=\"https://web.archive.org/web/20050703001958/http://www.aisee.com/gallery/graph7.htm\" rel=\"nofollow\">An example</a>（static picture）</li> \n<li><a class=\"external text\" href=\"https://web.archive.org/web/20050621072749/http://ciips.ee.uwa.edu.au/~morris/Year2/PLDS210/red_black.html\" rel=\"nofollow\">Another explanation</a>（pictures, source code, and Java interactive animation）</li> \n<li><a class=\"external text\" href=\"http://www.webcitation.org/query?id=1256547034536341&amp;url=geocities.com/dmh2000/articles/code/red-blacktree.html\" rel=\"nofollow\">Red-Black Tree Demonstration</a> by <a title=\"David M. Howard（页面不存在）\" class=\"new\" href=\"/w/index.php?title=David_M._Howard&amp;action=edit&amp;redlink=1\">David M. Howard</a></li> \n<li><a class=\"external text\" href=\"http://efsa.sourceforge.net/archive/durian/red_black_tree.htm\" rel=\"nofollow\">RBT: A SmallEiffel Red-Black Tree Library</a></li> \n<li><a class=\"external text\" href=\"http://libredblack.sourceforge.net/\" rel=\"nofollow\">libredblack: A C Red-Black Tree Library</a></li> \n<li><a class=\"external text\" href=\"https://web.archive.org/web/20081025221615/http://web.mit.edu/~emin/www/source_code/cpp_trees/index.html\" rel=\"nofollow\">Red-Black Tree C++ Code</a></li> \n<li><a class=\"external text\" href=\"https://web.archive.org/web/20050719170536/http://ciips.ee.uwa.edu.au/~morris/Year2/PLDS210/niemann/s_rbt.htm\" rel=\"nofollow\">Red-Black Trees</a> by <a title=\"Thomas Niemann（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Thomas_Niemann&amp;action=edit&amp;redlink=1\">Thomas Niemann</a></li> \n<li><a class=\"external text\" href=\"http://saturnman.blog.163.com/blog/static/5576112010969420383/\" rel=\"nofollow\">红黑树的介绍和实现</a></li>","fragment_id":"引用_4","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"},{"url":"","content":"<tbody>\n <tr> \n  <td style=\"padding: 2px;\"> \n   <table class=\"nowraplinks collapsible autocollapse navbox-inner\" id=\"collapsibleTable0\" style=\"background: none; color: inherit; border-spacing: 0;\" cellspacing=\"0\"> \n    <tbody>\n     <tr> \n      <th class=\"navbox-title\" colspan=\"2\" scope=\"col\"><span class=\"collapseButton\">[<a id=\"collapseButton0\" href=\"#\">隐藏</a>]</span> \n       <div class=\"plainlinks hlist navbar mini\"> \n        <ul> \n         <li class=\"nv-view\"><a title=\"Template:计算机科学中的树\" href=\"/wiki/Template:%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E6%A0%91\"><abbr title=\"查看该模板\" style=\"background: none; border: currentColor; border-image: none;\">查</abbr></a></li> \n         <li class=\"nv-talk\"><a title=\"Template talk:计算机科学中的树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Template_talk:%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E6%A0%91&amp;action=edit&amp;redlink=1\"><abbr title=\"讨论该模板\" style=\"background: none; border: currentColor; border-image: none;\">论</abbr></a></li> \n         <li class=\"nv-edit\"><a class=\"external text\" href=\"//zh.wikipedia.org/w/index.php?title=Template:%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%AD%E7%9A%84%E6%A0%91&amp;action=edit\"><abbr title=\"编辑该模板\" style=\"background: none; border: currentColor; border-image: none;\">编</abbr></a></li> \n        </ul> \n       </div> \n       <div style=\"font-size: 110%;\">\n        <a title=\"计算机科学\" href=\"/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6\">计算机科学</a>中的\n        <a title=\"树 (数据结构)\" href=\"/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">树</a>\n       </div> </th> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"二叉树\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91\">二叉树</a></th> \n      <td class=\"navbox-list navbox-odd hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"二叉查找树\" href=\"/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9\">二叉查找树（BST）</a></li> \n         <li><a title=\"笛卡尔树\" href=\"/wiki/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91\">笛卡尔树</a></li> \n         <li><a title=\"MVP树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=MVP%E6%A0%91&amp;action=edit&amp;redlink=1\">MVP树</a></li> \n         <li><a title=\"Top tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Top_tree&amp;action=edit&amp;redlink=1\">Top tree</a></li> \n         <li><a title=\"T树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=T%E6%A0%91&amp;action=edit&amp;redlink=1\">T树</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"自平衡二叉查找树\" class=\"mw-redirect\" href=\"/wiki/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\">自平衡二叉查找树</a></th> \n      <td class=\"navbox-list navbox-even hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"AA树\" href=\"/wiki/AA%E6%A0%91\">AA树</a></li> \n         <li><a title=\"AVL树\" href=\"/wiki/AVL%E6%A0%91\">AVL树</a></li> \n         <li><a title=\"左倾红黑树\" href=\"/wiki/%E5%B7%A6%E5%80%BE%E7%BA%A2%E9%BB%91%E6%A0%91\">左倾红黑树</a></li> \n         <li><a class=\"mw-selflink selflink\">红黑树</a></li> \n         <li><a title=\"替罪羊树\" href=\"/wiki/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91\">替罪羊树</a></li> \n         <li><a title=\"伸展树\" href=\"/wiki/%E4%BC%B8%E5%B1%95%E6%A0%91\">伸展树</a></li> \n         <li><a title=\"树堆\" href=\"/wiki/%E6%A0%91%E5%A0%86\">树堆</a></li> \n         <li><a title=\"加权平衡树\" href=\"/wiki/%E5%8A%A0%E6%9D%83%E5%B9%B3%E8%A1%A1%E6%A0%91\">加权平衡树</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"B树\" href=\"/wiki/B%E6%A0%91\">B树</a></th> \n      <td class=\"navbox-list navbox-odd hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"B+树\" href=\"/wiki/B%2B%E6%A0%91\">B+树</a></li> \n         <li><a title=\"B*树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=B*%E6%A0%91&amp;action=edit&amp;redlink=1\">B*树</a></li> \n         <li><a title=\"Bx树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Bx%E6%A0%91&amp;action=edit&amp;redlink=1\">B<small><sup>x</sup></small>树</a></li> \n         <li><a title=\"UB树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=UB%E6%A0%91&amp;action=edit&amp;redlink=1\">UB树</a></li> \n         <li><a title=\"2-3树\" href=\"/wiki/2-3%E6%A0%91\">2-3树</a></li> \n         <li><a title=\"2-3-4树\" href=\"/wiki/2-3-4%E6%A0%91\">2-3-4树</a></li> \n         <li><a title=\"(a,b)-树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=(a,b)-%E6%A0%91&amp;action=edit&amp;redlink=1\">(a,b)-树</a></li> \n         <li><a title=\"Dancing tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Dancing_tree&amp;action=edit&amp;redlink=1\">Dancing tree</a></li> \n         <li><a title=\"H树\" href=\"/wiki/H%E6%A0%91\">H树</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"堆 (数据结构)\" href=\"/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">堆</a></th> \n      <td class=\"navbox-list navbox-even hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"二叉堆\" href=\"/wiki/%E4%BA%8C%E5%8F%89%E5%A0%86\">二叉堆</a></li> \n         <li><a title=\"二项堆\" href=\"/wiki/%E4%BA%8C%E9%A1%B9%E5%A0%86\">二项堆</a></li> \n         <li><a title=\"斐波那契堆\" href=\"/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86\">斐波那契堆</a></li> \n         <li><a title=\"左偏树\" href=\"/wiki/%E5%B7%A6%E5%81%8F%E6%A0%91\">左偏树</a></li> \n         <li><a title=\"Pairing heap（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Pairing_heap&amp;action=edit&amp;redlink=1\">Pairing heap</a></li> \n         <li><a title=\"斜堆\" href=\"/wiki/%E6%96%9C%E5%A0%86\">斜堆</a></li> \n         <li><a title=\"Van Emde Boas tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Van_Emde_Boas_tree&amp;action=edit&amp;redlink=1\">Van Emde Boas tree</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"Trie\" href=\"/wiki/Trie\">Trie</a></th> \n      <td class=\"navbox-list navbox-odd hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"后缀树\" href=\"/wiki/%E5%90%8E%E7%BC%80%E6%A0%91\">后缀树</a></li> \n         <li><a title=\"基数树\" href=\"/wiki/%E5%9F%BA%E6%95%B0%E6%A0%91\">基数树</a></li> \n         <li><a title=\"三元搜索树\" href=\"/wiki/%E4%B8%89%E5%85%83%E6%90%9C%E7%B4%A2%E6%A0%91\">三叉查找树</a></li> \n         <li><a title=\"X-快速前缀树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=X-%E5%BF%AB%E9%80%9F%E5%89%8D%E7%BC%80%E6%A0%91&amp;action=edit&amp;redlink=1\">X-快速前缀树</a></li> \n         <li><a title=\"Y-快速前缀树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Y-%E5%BF%AB%E9%80%9F%E5%89%8D%E7%BC%80%E6%A0%91&amp;action=edit&amp;redlink=1\">Y-快速前缀树</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"二叉空间分区（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E4%BA%8C%E5%8F%89%E7%A9%BA%E9%97%B4%E5%88%86%E5%89%B2&amp;action=edit&amp;redlink=1\">二叉空间分区（BSP）</a>树</th> \n      <td class=\"navbox-list navbox-even hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"四叉树\" href=\"/wiki/%E5%9B%9B%E5%8F%89%E6%A0%91\">四叉树</a></li> \n         <li><a title=\"八叉树\" href=\"/wiki/%E5%85%AB%E5%8F%89%E6%A0%91\">八叉树</a></li> \n         <li><a title=\"K-d树\" href=\"/wiki/K-d%E6%A0%91\"><i>k</i>-d树</a></li> \n         <li><a title=\"隐式k-d树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E9%9A%90%E5%BC%8Fk-d%E6%A0%91&amp;action=edit&amp;redlink=1\">隐式<i>k</i>-d树</a></li> \n         <li><a title=\"VP树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=VP%E6%A0%91&amp;action=edit&amp;redlink=1\">VP树</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\">非二叉树</th> \n      <td class=\"navbox-list navbox-odd hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"指数树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E6%8C%87%E6%95%B0%E6%A0%91&amp;action=edit&amp;redlink=1\">指数树</a></li> \n         <li><a title=\"融合树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E8%9E%8D%E5%90%88%E6%A0%91&amp;action=edit&amp;redlink=1\">融合树</a></li> \n         <li><a title=\"区间树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%8C%BA%E9%97%B4%E6%A0%91&amp;action=edit&amp;redlink=1\">区间树</a></li> \n         <li><a title=\"PQ树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=PQ%E6%A0%91&amp;action=edit&amp;redlink=1\">PQ树</a></li> \n         <li><a title=\"Range tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Range_tree&amp;action=edit&amp;redlink=1\">Range tree</a></li> \n         <li><a title=\"SPQR树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=SPQR%E6%A0%91&amp;action=edit&amp;redlink=1\">SPQR树</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\"><a title=\"空间数据库（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%BA%93&amp;action=edit&amp;redlink=1\">空间</a>数据分区树</th> \n      <td class=\"navbox-list navbox-even hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"R树\" href=\"/wiki/R%E6%A0%91\">R树</a></li> \n         <li><a title=\"R*树\" href=\"/wiki/R*%E6%A0%91\">R*树</a></li> \n         <li><a title=\"R+树\" href=\"/wiki/R%2B%E6%A0%91\">R+树</a></li> \n         <li><a title=\"X树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=X%E6%A0%91&amp;action=edit&amp;redlink=1\">X树</a></li> \n         <li><a title=\"M树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=M%E6%A0%91&amp;action=edit&amp;redlink=1\">M树</a></li> \n         <li><a title=\"线段树 (存储区间)\" href=\"/wiki/%E7%B7%9A%E6%AE%B5%E6%A8%B9_(%E5%84%B2%E5%AD%98%E5%8D%80%E9%96%93)\">线段树</a></li> \n         <li><a title=\"希尔伯特R树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9R%E6%A0%91&amp;action=edit&amp;redlink=1\">希尔伯特R树</a></li> \n         <li><a title=\"优先R树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E4%BC%98%E5%85%88R%E6%A0%91&amp;action=edit&amp;redlink=1\">优先R树</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n     <tr style=\"height: 2px;\"> \n      <td colspan=\"2\"></td> \n     </tr> \n     <tr> \n      <th class=\"navbox-group\" scope=\"row\">其他树</th> \n      <td class=\"navbox-list navbox-odd hlist\" style=\"padding: 0px; width: 100%; text-align: left; border-left-width: 2px; border-left-style: solid;\"> \n       <div style=\"padding: 0em 0.25em;\"> \n        <ul> \n         <li><a title=\"散列日历（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E6%95%A3%E5%88%97%E6%97%A5%E5%8E%86&amp;action=edit&amp;redlink=1\">散列日历</a></li> \n         <li><a title=\"散列树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=%E6%95%A3%E5%88%97%E6%A0%91&amp;action=edit&amp;redlink=1\">散列树</a></li> \n         <li><a title=\"Finger tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Finger_tree&amp;action=edit&amp;redlink=1\">Finger tree</a></li> \n         <li><a title=\"Order statistic tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Order_statistic_tree&amp;action=edit&amp;redlink=1\">Order statistic tree</a></li> \n         <li><a title=\"Metric tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Metric_tree&amp;action=edit&amp;redlink=1\">Metric tree</a></li> \n         <li><a title=\"Cover tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Cover_tree&amp;action=edit&amp;redlink=1\">Cover tree</a></li> \n         <li><a title=\"BK树（页面不存在）\" class=\"new\" href=\"/w/index.php?title=BK%E6%A0%91&amp;action=edit&amp;redlink=1\">BK树</a></li> \n         <li><a title=\"Doubly chained tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Doubly_chained_tree&amp;action=edit&amp;redlink=1\">Doubly chained tree</a></li> \n         <li><a title=\"IDistance（页面不存在）\" class=\"new\" href=\"/w/index.php?title=IDistance&amp;action=edit&amp;redlink=1\">iDistance</a></li> \n         <li><a title=\"Link-cut tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Link-cut_tree&amp;action=edit&amp;redlink=1\">Link-cut tree</a></li> \n         <li><a title=\"Log-structured merge-tree（页面不存在）\" class=\"new\" href=\"/w/index.php?title=Log-structured_merge-tree&amp;action=edit&amp;redlink=1\">Log-structured merge-tree</a></li> \n         <li><a title=\"树状数组\" href=\"/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84\">树状数组</a></li> \n        </ul> \n       </div> </td> \n     </tr> \n    </tbody>\n   </table> </td> \n </tr> \n</tbody>","fragment_id":"引用_5","scratchTime":"2017-10-28 15:33:11.0","type":"leaf","flag":"fragment"}]}]}